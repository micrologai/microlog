oops
models.start
Module(
    body=[
        Import(
            names=[
                alias(name='os')]),
        Import(
            names=[
                alias(name='time')]),
        Assign(
            targets=[
                Name(id='EVENT_KIND_SYMBOL', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_CALL', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_STATUS', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_INFO', ctx=Store())],
            value=Constant(value=3)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_WARN', ctx=Store())],
            value=Constant(value=4)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_DEBUG', ctx=Store())],
            value=Constant(value=5)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_ERROR', ctx=Store())],
            value=Constant(value=6)),
        Assign(
            targets=[
                Name(id='EVENT_KIND_CALLSITE', ctx=Store())],
            value=Constant(value=7)),
        Assign(
            targets=[
                Name(id='kinds', ctx=Store())],
            value=List(
                elts=[
                    Constant(value='Symbol'),
                    Constant(value='Call'),
                    Constant(value='Status'),
                    Constant(value='Info'),
                    Constant(value='Warn'),
                    Constant(value='Debug'),
                    Constant(value='Error'),
                    Constant(value='Callsite')],
                ctx=Load())),
        AnnAssign(
            target=Name(id='statusDelay', ctx=Store()),
            annotation=Name(id='float', ctx=Load()),
            value=Constant(value=0.1),
            simple=1),
        AnnAssign(
            target=Name(id='traceDelay', ctx=Store()),
            annotation=Name(id='float', ctx=Load()),
            value=Constant(value=0.01),
            simple=1),
        Assign(
            targets=[
                Name(id='IGNORE_MODULES', ctx=Store())],
            value=List(
                elts=[
                    Constant(value='microlog.tracer'),
                    Constant(value='microlog.microlog'),
                    Constant(value='microlog'),
                    Constant(value='importlib')],
                ctx=Load()))],
    type_ignores=[])
Module(
    body=[
        ImportFrom(
            module='collections',
            names=[
                alias(name='defaultdict')],
            level=0),
        Import(
            names=[
                alias(name='json')]),
        Import(
            names=[
                alias(name='os')]),
        Assign(
            targets=[
                Name(id='ERROR_OPENAI', ctx=Store())],
            value=Constant(value='\nCould not import openai, please install the Microlog dependencies before running the server.\n\nRun this:\n```\n      $ python3 -m pip install -r requirements.txt\n      $ python3 microlog/server.py\n```\n')),
        Assign(
            targets=[
                Name(id='ERROR_KEY', ctx=Store())],
            value=Constant(value='\nYou did not set an OpenAI key before running the Microlog server. \n\nGet an OpenAI API key and then run this:\n```\n      $ export OPENAI_API_KEY=<your-api-key>\n      $ python3 microlog/server.py\n```\n\nSee https://platform.openai.com/account/api-keys for creating a key.\nThe OpenAI API may not work when you are on a free trial of the OpenAI API.\n')),
        Assign(
            targets=[
                Name(id='HELP', ctx=Store())],
            value=Constant(value='\nSee https://platform.openai.com/account/api-keys\nThe OpenAI API may not work when you are on a free trial of the OpenAI API.\n')),
        FunctionDef(
            name='explainLog',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='application'),
                    arg(arg='log')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Try(
                    body=[
                        Import(
                            names=[
                                alias(name='openai')])],
                    handlers=[
                        ExceptHandler(
                            body=[
                                Return(
                                    value=Name(id='ERROR_OPENAI', ctx=Load()))])],
                    orelse=[],
                    finalbody=[]),
                Assign(
                    targets=[
                        Attribute(
                            value=Name(id='openai', ctx=Load()),
                            attr='api_key',
                            ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='os', ctx=Load()),
                            attr='getenv',
                            ctx=Load()),
                        args=[
                            Constant(value='OPENAI_API_KEY')],
                        keywords=[])),
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Attribute(
                            value=Name(id='openai', ctx=Load()),
                            attr='api_key',
                            ctx=Load())),
                    body=[
                        Return(
                            value=Name(id='ERROR_KEY', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='prompt', ctx=Store())],
                    value=Call(
                        func=Name(id='getPrompt', ctx=Load()),
                        args=[
                            Name(id='application', ctx=Load()),
                            Name(id='log', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Name(id='prompt', ctx=Load())],
                        keywords=[])),
                Try(
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='cleanup', ctx=Load()),
                                args=[
                                    Subscript(
                                        value=Subscript(
                                            value=Subscript(
                                                value=Call(
                                                    func=Attribute(
                                                        value=Attribute(
                                                            value=Name(id='openai', ctx=Load()),
                                                            attr='Completion',
                                                            ctx=Load()),
                                                        attr='create',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[
                                                        keyword(
                                                            arg='model',
                                                            value=Constant(value='text-davinci-003')),
                                                        keyword(
                                                            arg='prompt',
                                                            value=Name(id='prompt', ctx=Load())),
                                                        keyword(
                                                            arg='temperature',
                                                            value=Constant(value=0)),
                                                        keyword(
                                                            arg='max_tokens',
                                                            value=Constant(value=350)),
                                                        keyword(
                                                            arg='top_p',
                                                            value=Constant(value=1.0)),
                                                        keyword(
                                                            arg='frequency_penalty',
                                                            value=Constant(value=0.0)),
                                                        keyword(
                                                            arg='presence_penalty',
                                                            value=Constant(value=0.0)),
                                                        keyword(
                                                            arg='stop',
                                                            value=List(
                                                                elts=[
                                                                    Constant(value='"""')],
                                                                ctx=Load()))]),
                                                slice=Constant(value='choices'),
                                                ctx=Load()),
                                            slice=Constant(value=0),
                                            ctx=Load()),
                                        slice=Constant(value='text'),
                                        ctx=Load())],
                                keywords=[]))],
                    handlers=[
                        ExceptHandler(
                            type=Name(id='Exception', ctx=Load()),
                            name='e',
                            body=[
                                Return(
                                    value=JoinedStr(
                                        values=[
                                            Constant(value='Could not access OpenAI. Here is what they said:\n\n- '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='str', ctx=Load()),
                                                    args=[
                                                        Name(id='e', ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='\n'),
                                            FormattedValue(
                                                value=Name(id='HELP', ctx=Load()),
                                                conversion=-1)]))])],
                    orelse=[],
                    finalbody=[])],
            decorator_list=[]),
        FunctionDef(
            name='parse',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='log')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Import(
                    names=[
                        alias(name='config')]),
                Import(
                    names=[
                        alias(name='models')]),
                Assign(
                    targets=[
                        Name(id='counts', ctx=Store())],
                    value=Call(
                        func=Name(id='defaultdict', ctx=Load()),
                        args=[
                            Name(id='int', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='duration', ctx=Store())],
                    value=Call(
                        func=Name(id='defaultdict', ctx=Load()),
                        args=[
                            Name(id='float', ctx=Load())],
                        keywords=[])),
                For(
                    target=Tuple(
                        elts=[
                            Name(id='n', ctx=Store()),
                            Name(id='line', ctx=Store())],
                        ctx=Store()),
                    iter=Call(
                        func=Name(id='enumerate', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='split',
                                    ctx=Load()),
                                args=[
                                    Constant(value='\n')],
                                keywords=[])],
                        keywords=[]),
                    body=[
                        Try(
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='event', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='json', ctx=Load()),
                                            attr='loads',
                                            ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='['),
                                                    FormattedValue(
                                                        value=Name(id='line', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=']')])],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='kind', ctx=Store())],
                                    value=Subscript(
                                        value=Name(id='event', ctx=Load()),
                                        slice=Constant(value=0),
                                        ctx=Load())),
                                If(
                                    test=Compare(
                                        left=Name(id='kind', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='config', ctx=Load()),
                                                attr='EVENT_KIND_SYMBOL',
                                                ctx=Load())]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='models', ctx=Load()),
                                                    attr='unmarshallSymbol',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='event', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        If(
                                            test=Compare(
                                                left=Name(id='kind', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='config', ctx=Load()),
                                                        attr='EVENT_KIND_CALLSITE',
                                                        ctx=Load())]),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='models', ctx=Load()),
                                                                attr='CallSite',
                                                                ctx=Load()),
                                                            attr='unmarshall',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='event', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Compare(
                                                        left=Name(id='kind', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='config', ctx=Load()),
                                                                attr='EVENT_KIND_CALL',
                                                                ctx=Load())]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Name(id='call', ctx=Store())],
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='models', ctx=Load()),
                                                                        attr='Call',
                                                                        ctx=Load()),
                                                                    attr='unmarshall',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='event', ctx=Load())],
                                                                keywords=[])),
                                                        AugAssign(
                                                            target=Subscript(
                                                                value=Name(id='counts', ctx=Load()),
                                                                slice=Name(id='call', ctx=Load()),
                                                                ctx=Store()),
                                                            op=Add(),
                                                            value=Constant(value=1)),
                                                        AugAssign(
                                                            target=Subscript(
                                                                value=Name(id='duration', ctx=Load()),
                                                                slice=Name(id='call', ctx=Load()),
                                                                ctx=Store()),
                                                            op=Add(),
                                                            value=Attribute(
                                                                value=Name(id='call', ctx=Load()),
                                                                attr='duration',
                                                                ctx=Load()))],
                                                    orelse=[])])])],
                            handlers=[
                                ExceptHandler(
                                    type=Name(id='Exception', ctx=Load()),
                                    name='e',
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Name(id='print', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='Microlog: Error parsing line '),
                                                            FormattedValue(
                                                                value=BinOp(
                                                                    left=Name(id='n', ctx=Load()),
                                                                    op=Add(),
                                                                    right=Constant(value=1)),
                                                                conversion=-1),
                                                            Constant(value=' '),
                                                            FormattedValue(
                                                                value=Name(id='e', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=':\n'),
                                                            FormattedValue(
                                                                value=Name(id='line', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='\n')])],
                                                keywords=[])),
                                        Raise()])],
                            orelse=[],
                            finalbody=[])],
                    orelse=[]),
                Return(
                    value=Call(
                        func=Attribute(
                            value=Constant(value='\n'),
                            attr='join',
                            ctx=Load()),
                        args=[
                            GeneratorExp(
                                elt=JoinedStr(
                                    values=[
                                        FormattedValue(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Attribute(
                                                            value=Name(id='call', ctx=Load()),
                                                            attr='callSite',
                                                            ctx=Load()),
                                                        attr='name',
                                                        ctx=Load()),
                                                    attr='replace',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='__main__.'),
                                                    Constant(value='')],
                                                keywords=[]),
                                            conversion=-1),
                                        Constant(value='\t'),
                                        FormattedValue(
                                            value=Subscript(
                                                value=Name(id='counts', ctx=Load()),
                                                slice=Name(id='call', ctx=Load()),
                                                ctx=Load()),
                                            conversion=-1)]),
                                generators=[
                                    comprehension(
                                        target=Name(id='call', ctx=Store()),
                                        iter=Name(id='counts', ctx=Load()),
                                        ifs=[
                                            Compare(
                                                left=Subscript(
                                                    value=Name(id='duration', ctx=Load()),
                                                    slice=Name(id='call', ctx=Load()),
                                                    ctx=Load()),
                                                ops=[
                                                    Gt()],
                                                comparators=[
                                                    Constant(value=1)])],
                                        is_async=0)])],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='cleanup',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='explanation')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='explanation', ctx=Load()),
                                                    attr='replace',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value=' appears to be '),
                                                    Constant(value=' is ')],
                                                keywords=[]),
                                            attr='replace',
                                            ctx=Load()),
                                        args=[
                                            Constant(value=' suggest that '),
                                            Constant(value=' indicate that ')],
                                        keywords=[]),
                                    attr='replace',
                                    ctx=Load()),
                                args=[
                                    Constant(value=' could be '),
                                    Constant(value=' is ')],
                                keywords=[]),
                            attr='replace',
                            ctx=Load()),
                        args=[
                            Constant(value=' likely '),
                            Constant(value=' ')],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='getPrompt',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='application'),
                    arg(arg='log')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=JoinedStr(
                        values=[
                            Constant(value='\nBelow is a table with method calls made by a Python program named "'),
                            FormattedValue(
                                value=Name(id='application', ctx=Load()),
                                conversion=-1),
                            Constant(value='".\nExplain in detail what purpose the program has. Do not just list the calls it makes:\n\nMethod Name          Count  \n----------------------------\n'),
                            FormattedValue(
                                value=Call(
                                    func=Name(id='parse', ctx=Load()),
                                    args=[
                                        Name(id='log', ctx=Load())],
                                    keywords=[]),
                                conversion=-1),
                            Constant(value='\n----------------------------\n        ')]))],
            decorator_list=[])],
    type_ignores=[])
Module(
    body=[
        ImportFrom(
            module='api',
            names=[
                alias(name='info'),
                alias(name='warn'),
                alias(name='debug'),
                alias(name='error')],
            level=1),
        ImportFrom(
            module='api',
            names=[
                alias(name='start'),
                alias(name='stop')],
            level=1),
        ImportFrom(
            module='api',
            names=[
                alias(name='heap')],
            level=1),
        ImportFrom(
            module='api',
            names=[
                alias(name='enabled')],
            level=1),
        Try(
            body=[
                ImportFrom(
                    names=[
                        alias(name='server')],
                    level=1)],
            handlers=[
                ExceptHandler(
                    body=[
                        Pass()])],
            orelse=[],
            finalbody=[])],
    type_ignores=[])
Module(
    body=[
        Import(
            names=[
                alias(name='datetime')]),
        Import(
            names=[
                alias(name='json')]),
        Import(
            names=[
                alias(name='os')]),
        Import(
            names=[
                alias(name='re')]),
        Import(
            names=[
                alias(name='sys')]),
        Import(
            names=[
                alias(name='time')]),
        Import(
            names=[
                alias(name='zlib')]),
        Assign(
            targets=[
                Name(id='begin', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Name(id='time', ctx=Load()),
                    attr='perf_counter',
                    ctx=Load()),
                args=[],
                keywords=[])),
        Assign(
            targets=[
                Name(id='buffer', ctx=Store())],
            value=List(elts=[], ctx=Load())),
        Assign(
            targets=[
                Name(id='verbose', ctx=Store())],
            value=Constant(value=True)),
        FunctionDef(
            name='start',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Global(
                    names=[
                        'begin']),
                Assign(
                    targets=[
                        Name(id='begin', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='time', ctx=Load()),
                            attr='perf_counter',
                            ctx=Load()),
                        args=[],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='now',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=BinOp(
                        left=Call(
                            func=Attribute(
                                value=Name(id='time', ctx=Load()),
                                attr='perf_counter',
                                ctx=Load()),
                            args=[],
                            keywords=[]),
                        op=Sub(),
                        right=Name(id='begin', ctx=Load())))],
            decorator_list=[]),
        FunctionDef(
            name='put',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='event')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='buffer', ctx=Load()),
                            attr='append',
                            ctx=Load()),
                        args=[
                            Name(id='event', ctx=Load())],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='clear',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='buffer', ctx=Load()),
                            attr='clear',
                            ctx=Load()),
                        args=[],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='sanitize',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='filename')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=Call(
                        func=Attribute(
                            value=Name(id='filename', ctx=Load()),
                            attr='replace',
                            ctx=Load()),
                        args=[
                            Constant(value='/'),
                            Constant(value='_')],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='getApplication',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                ImportFrom(
                    module='microlog',
                    names=[
                        alias(name='config')],
                    level=0),
                If(
                    test=Attribute(
                        value=Name(id='config', ctx=Load()),
                        attr='application',
                        ctx=Load()),
                    body=[
                        Return(
                            value=Attribute(
                                value=Name(id='config', ctx=Load()),
                                attr='application',
                                ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='name', ctx=Store())],
                    value=IfExp(
                        test=Compare(
                            left=Subscript(
                                value=Attribute(
                                    value=Name(id='sys', ctx=Load()),
                                    attr='argv',
                                    ctx=Load()),
                                slice=Constant(value=0),
                                ctx=Load()),
                            ops=[
                                NotEq()],
                            comparators=[
                                Constant(value='-c')]),
                        body=Subscript(
                            value=Attribute(
                                value=Name(id='sys', ctx=Load()),
                                attr='argv',
                                ctx=Load()),
                            slice=Constant(value=0),
                            ctx=Load()),
                        orelse=Constant(value='python'))),
                Assign(
                    targets=[
                        Name(id='name', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Constant(value='-'),
                            attr='join',
                            ctx=Load()),
                        args=[
                            Subscript(
                                value=Call(
                                    func=Attribute(
                                        value=Name(id='name', ctx=Load()),
                                        attr='split',
                                        ctx=Load()),
                                    args=[
                                        Constant(value='/')],
                                    keywords=[]),
                                slice=Slice(
                                    lower=UnaryOp(
                                        op=USub(),
                                        operand=Constant(value=3))),
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='name', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='name', ctx=Load()),
                                    attr='replace',
                                    ctx=Load()),
                                args=[
                                    Constant(value='python-site-packages-'),
                                    Constant(value='')],
                                keywords=[]),
                            attr='replace',
                            ctx=Load()),
                        args=[
                            Constant(value='.py'),
                            Constant(value='')],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='name', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='name', ctx=Load()),
                            attr='replace',
                            ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='os', ctx=Load()),
                                        attr='path',
                                        ctx=Load()),
                                    attr='expanduser',
                                    ctx=Load()),
                                args=[
                                    Constant(value='~')],
                                keywords=[]),
                            Constant(value='~')],
                        keywords=[])),
                Return(
                    value=Name(id='name', ctx=Load()))],
            decorator_list=[]),
        FunctionDef(
            name='getVersion',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                ImportFrom(
                    module='microlog',
                    names=[
                        alias(name='config')],
                    level=0),
                If(
                    test=Attribute(
                        value=Name(id='config', ctx=Load()),
                        attr='version',
                        ctx=Load()),
                    body=[
                        Return(
                            value=Attribute(
                                value=Name(id='config', ctx=Load()),
                                attr='version',
                                ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='path', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='os', ctx=Load()),
                                attr='path',
                                ctx=Load()),
                            attr='abspath',
                            ctx=Load()),
                        args=[
                            Subscript(
                                value=Attribute(
                                    value=Name(id='sys', ctx=Load()),
                                    attr='argv',
                                    ctx=Load()),
                                slice=Constant(value=0),
                                ctx=Load())],
                        keywords=[])),
                While(
                    test=Compare(
                        left=Name(id='path', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value='/')]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='setup', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='os', ctx=Load()),
                                        attr='path',
                                        ctx=Load()),
                                    attr='join',
                                    ctx=Load()),
                                args=[
                                    Name(id='path', ctx=Load()),
                                    Constant(value='setup.py')],
                                keywords=[])),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='os', ctx=Load()),
                                        attr='path',
                                        ctx=Load()),
                                    attr='exists',
                                    ctx=Load()),
                                args=[
                                    Name(id='setup', ctx=Load())],
                                keywords=[]),
                            body=[
                                Import(
                                    names=[
                                        alias(name='ast')]),
                                Assign(
                                    targets=[
                                        Name(id='tree', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='ast', ctx=Load()),
                                            attr='parse',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Call(
                                                        func=Name(id='open', ctx=Load()),
                                                        args=[
                                                            Name(id='setup', ctx=Load())],
                                                        keywords=[]),
                                                    attr='read',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[])],
                                        keywords=[])),
                                For(
                                    target=Name(id='line', ctx=Store()),
                                    iter=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='ast', ctx=Load()),
                                                    attr='dump',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='tree', ctx=Load())],
                                                keywords=[
                                                    keyword(
                                                        arg='indent',
                                                        value=Constant(value=4))]),
                                            attr='split',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='\n')],
                                        keywords=[]),
                                    body=[
                                        If(
                                            test=Call(
                                                func=Attribute(
                                                    value=Name(id='re', ctx=Load()),
                                                    attr='search',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value="value='[0-9.]*'"),
                                                    Name(id='line', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Return(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='re', ctx=Load()),
                                                            attr='sub',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value=".*value='([0-9.]*)'.*"),
                                                            Constant(value='\\1'),
                                                            Name(id='line', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[])],
                                    orelse=[])],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='path', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='os', ctx=Load()),
                                        attr='path',
                                        ctx=Load()),
                                    attr='dirname',
                                    ctx=Load()),
                                args=[
                                    Name(id='path', ctx=Load())],
                                keywords=[]))],
                    orelse=[]),
                Return(
                    value=Constant(value='0.0.0'))],
            decorator_list=[]),
        FunctionDef(
            name='getEnvironment',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=Constant(value='dev'))],
            decorator_list=[]),
        FunctionDef(
            name='getIdentifier',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='date', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='datetime', ctx=Load()),
                                        attr='datetime',
                                        ctx=Load()),
                                    attr='now',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            attr='strftime',
                            ctx=Load()),
                        args=[
                            Constant(value='%Y_%m_%d_%H_%M_%S')],
                        keywords=[])),
                Return(
                    value=JoinedStr(
                        values=[
                            FormattedValue(
                                value=Call(
                                    func=Name(id='getApplication', ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                conversion=-1),
                            Constant(value='/'),
                            FormattedValue(
                                value=Call(
                                    func=Name(id='getVersion', ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                conversion=-1),
                            Constant(value='/'),
                            FormattedValue(
                                value=Name(id='date', ctx=Load()),
                                conversion=-1)]))],
            decorator_list=[]),
        FunctionDef(
            name='getLogPath',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='identifier')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Import(
                    names=[
                        alias(name='appdata')]),
                Assign(
                    targets=[
                        Name(id='paths', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='appdata', ctx=Load()),
                            attr='AppDataPaths',
                            ctx=Load()),
                        args=[
                            Constant(value='microlog')],
                        keywords=[])),
                If(
                    test=Attribute(
                        value=Name(id='paths', ctx=Load()),
                        attr='require_setup',
                        ctx=Load()),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='paths', ctx=Load()),
                                    attr='setup',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='path', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='paths', ctx=Load()),
                            attr='get_log_file_path',
                            ctx=Load()),
                        args=[
                            Name(id='identifier', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='dirname', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='os', ctx=Load()),
                                attr='path',
                                ctx=Load()),
                            attr='dirname',
                            ctx=Load()),
                        args=[
                            Name(id='path', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='os', ctx=Load()),
                            attr='makedirs',
                            ctx=Load()),
                        args=[
                            Name(id='dirname', ctx=Load())],
                        keywords=[
                            keyword(
                                arg='exist_ok',
                                value=Constant(value=True))])),
                Return(
                    value=JoinedStr(
                        values=[
                            FormattedValue(
                                value=Name(id='path', ctx=Load()),
                                conversion=-1),
                            Constant(value='.zip')]))],
            decorator_list=[]),
        FunctionDef(
            name='validate',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                ImportFrom(
                    module='microlog',
                    names=[
                        alias(name='config')],
                    level=0),
                ImportFrom(
                    module='microlog',
                    names=[
                        alias(name='models')],
                    level=0),
                For(
                    target=Tuple(
                        elts=[
                            Name(id='n', ctx=Store()),
                            Name(id='event', ctx=Store())],
                        ctx=Store()),
                    iter=Call(
                        func=Name(id='enumerate', ctx=Load()),
                        args=[
                            Name(id='buffer', ctx=Load())],
                        keywords=[]),
                    body=[
                        Try(
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='line', ctx=Store())],
                                    value=JoinedStr(
                                        values=[
                                            FormattedValue(
                                                value=Call(
                                                    func=Attribute(
                                                        value=Constant(value=','),
                                                        attr='join',
                                                        ctx=Load()),
                                                    args=[
                                                        GeneratorExp(
                                                            elt=Call(
                                                                func=Attribute(
                                                                    value=Name(id='json', ctx=Load()),
                                                                    attr='dumps',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='e', ctx=Load())],
                                                                keywords=[]),
                                                            generators=[
                                                                comprehension(
                                                                    target=Name(id='e', ctx=Store()),
                                                                    iter=Name(id='event', ctx=Load()),
                                                                    ifs=[],
                                                                    is_async=0)])],
                                                    keywords=[]),
                                                conversion=-1)])),
                                Assign(
                                    targets=[
                                        Name(id='event', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='json', ctx=Load()),
                                            attr='loads',
                                            ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='['),
                                                    FormattedValue(
                                                        value=Name(id='line', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=']')])],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='kind', ctx=Store())],
                                    value=Subscript(
                                        value=Name(id='event', ctx=Load()),
                                        slice=Constant(value=0),
                                        ctx=Load())),
                                If(
                                    test=Compare(
                                        left=Name(id='kind', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='config', ctx=Load()),
                                                attr='EVENT_KIND_SYMBOL',
                                                ctx=Load())]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='models', ctx=Load()),
                                                    attr='unmarshallSymbol',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='event', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        If(
                                            test=Compare(
                                                left=Name(id='kind', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='config', ctx=Load()),
                                                        attr='EVENT_KIND_CALLSITE',
                                                        ctx=Load())]),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='models', ctx=Load()),
                                                                attr='CallSite',
                                                                ctx=Load()),
                                                            attr='unmarshall',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='event', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Compare(
                                                        left=Name(id='kind', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='config', ctx=Load()),
                                                                attr='EVENT_KIND_CALL',
                                                                ctx=Load())]),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='models', ctx=Load()),
                                                                        attr='Call',
                                                                        ctx=Load()),
                                                                    attr='unmarshall',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='event', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Compare(
                                                                left=Name(id='kind', ctx=Load()),
                                                                ops=[
                                                                    Eq()],
                                                                comparators=[
                                                                    Attribute(
                                                                        value=Name(id='config', ctx=Load()),
                                                                        attr='EVENT_KIND_STATUS',
                                                                        ctx=Load())]),
                                                            body=[
                                                                Expr(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Attribute(
                                                                                value=Name(id='models', ctx=Load()),
                                                                                attr='Status',
                                                                                ctx=Load()),
                                                                            attr='unmarshall',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Name(id='event', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=Compare(
                                                                        left=Name(id='kind', ctx=Load()),
                                                                        ops=[
                                                                            In()],
                                                                        comparators=[
                                                                            List(
                                                                                elts=[
                                                                                    Attribute(
                                                                                        value=Name(id='config', ctx=Load()),
                                                                                        attr='EVENT_KIND_INFO',
                                                                                        ctx=Load()),
                                                                                    Attribute(
                                                                                        value=Name(id='config', ctx=Load()),
                                                                                        attr='EVENT_KIND_WARN',
                                                                                        ctx=Load()),
                                                                                    Attribute(
                                                                                        value=Name(id='config', ctx=Load()),
                                                                                        attr='EVENT_KIND_DEBUG',
                                                                                        ctx=Load()),
                                                                                    Attribute(
                                                                                        value=Name(id='config', ctx=Load()),
                                                                                        attr='EVENT_KIND_ERROR',
                                                                                        ctx=Load())],
                                                                                ctx=Load())]),
                                                                    body=[
                                                                        Expr(
                                                                            value=Call(
                                                                                func=Attribute(
                                                                                    value=Attribute(
                                                                                        value=Name(id='models', ctx=Load()),
                                                                                        attr='MarkerModel',
                                                                                        ctx=Load()),
                                                                                    attr='unmarshall',
                                                                                    ctx=Load()),
                                                                                args=[
                                                                                    Name(id='event', ctx=Load())],
                                                                                keywords=[]))],
                                                                    orelse=[])])])])])],
                            handlers=[
                                ExceptHandler(
                                    type=Name(id='Exception', ctx=Load()),
                                    name='e',
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='sys', ctx=Load()),
                                                        attr='stderr',
                                                        ctx=Load()),
                                                    attr='write',
                                                    ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='Microlog: Error validating line '),
                                                            FormattedValue(
                                                                value=BinOp(
                                                                    left=Name(id='n', ctx=Load()),
                                                                    op=Add(),
                                                                    right=Constant(value=1)),
                                                                conversion=-1),
                                                            Constant(value=' '),
                                                            FormattedValue(
                                                                value=Name(id='e', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=':\n'),
                                                            FormattedValue(
                                                                value=Name(id='line', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='\n')])],
                                                keywords=[])),
                                        Raise()])],
                            orelse=[],
                            finalbody=[])],
                    orelse=[])],
            decorator_list=[]),
        FunctionDef(
            name='stop',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                ImportFrom(
                    module='microlog',
                    names=[
                        alias(name='config')],
                    level=0),
                Assign(
                    targets=[
                        Name(id='uncompressed', ctx=Store())],
                    value=Call(
                        func=Name(id='bytes', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Constant(value='\n'),
                                    attr='join',
                                    ctx=Load()),
                                args=[
                                    GeneratorExp(
                                        elt=JoinedStr(
                                            values=[
                                                FormattedValue(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Constant(value=','),
                                                            attr='join',
                                                            ctx=Load()),
                                                        args=[
                                                            GeneratorExp(
                                                                elt=Call(
                                                                    func=Attribute(
                                                                        value=Name(id='json', ctx=Load()),
                                                                        attr='dumps',
                                                                        ctx=Load()),
                                                                    args=[
                                                                        Name(id='e', ctx=Load())],
                                                                    keywords=[]),
                                                                generators=[
                                                                    comprehension(
                                                                        target=Name(id='e', ctx=Store()),
                                                                        iter=Name(id='event', ctx=Load()),
                                                                        ifs=[],
                                                                        is_async=0)])],
                                                        keywords=[]),
                                                    conversion=-1)]),
                                        generators=[
                                            comprehension(
                                                target=Name(id='event', ctx=Store()),
                                                iter=Name(id='buffer', ctx=Load()),
                                                ifs=[],
                                                is_async=0)])],
                                keywords=[])],
                        keywords=[
                            keyword(
                                arg='encoding',
                                value=Constant(value='utf-8'))])),
                Assign(
                    targets=[
                        Name(id='identifier', ctx=Store())],
                    value=Call(
                        func=Name(id='getIdentifier', ctx=Load()),
                        args=[],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='path', ctx=Store())],
                    value=Call(
                        func=Name(id='getLogPath', ctx=Load()),
                        args=[
                            Name(id='identifier', ctx=Load())],
                        keywords=[])),
                With(
                    items=[
                        withitem(
                            context_expr=Call(
                                func=Name(id='open', ctx=Load()),
                                args=[
                                    Name(id='path', ctx=Load()),
                                    Constant(value='wb')],
                                keywords=[]),
                            optional_vars=Name(id='fd', ctx=Store()))],
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='fd', ctx=Load()),
                                    attr='write',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='zlib', ctx=Load()),
                                            attr='compress',
                                            ctx=Load()),
                                        args=[
                                            Name(id='uncompressed', ctx=Load())],
                                        keywords=[
                                            keyword(
                                                arg='level',
                                                value=Constant(value=9))])],
                                keywords=[]))]),
                If(
                    test=Name(id='verbose', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='duration', ctx=Store())],
                            value=BinOp(
                                left=Call(
                                    func=Attribute(
                                        value=Name(id='time', ctx=Load()),
                                        attr='perf_counter',
                                        ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                op=Sub(),
                                right=Name(id='begin', ctx=Load()))),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Compare(
                                    left=Constant(value='VSCODE_CWD'),
                                    ops=[
                                        In()],
                                    comparators=[
                                        Attribute(
                                            value=Name(id='os', ctx=Load()),
                                            attr='environ',
                                            ctx=Load())])),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='sys', ctx=Load()),
                                                attr='stdout',
                                                ctx=Load()),
                                            attr='write',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Constant(value='\n'),
                                                    attr='join',
                                                    ctx=Load()),
                                                args=[
                                                    List(
                                                        elts=[
                                                            BinOp(
                                                                left=Constant(value='-'),
                                                                op=Mult(),
                                                                right=Constant(value=90)),
                                                            Constant(value='Microlog Statistics:'),
                                                            BinOp(
                                                                left=Constant(value='-'),
                                                                op=Mult(),
                                                                right=Constant(value=90)),
                                                            JoinedStr(
                                                                values=[
                                                                    Constant(value='- log size:    '),
                                                                    FormattedValue(
                                                                        value=Attribute(
                                                                            value=Call(
                                                                                func=Attribute(
                                                                                    value=Name(id='os', ctx=Load()),
                                                                                    attr='stat',
                                                                                    ctx=Load()),
                                                                                args=[
                                                                                    Name(id='path', ctx=Load())],
                                                                                keywords=[]),
                                                                            attr='st_size',
                                                                            ctx=Load()),
                                                                        conversion=-1,
                                                                        format_spec=JoinedStr(
                                                                            values=[
                                                                                Constant(value=',')])),
                                                                    Constant(value=' bytes')]),
                                                            JoinedStr(
                                                                values=[
                                                                    Constant(value='- report URL:  '),
                                                                    FormattedValue(
                                                                        value=JoinedStr(
                                                                            values=[
                                                                                Constant(value='http://127.0.0.1:4000/log/'),
                                                                                FormattedValue(
                                                                                    value=Name(id='identifier', ctx=Load()),
                                                                                    conversion=-1)]),
                                                                        conversion=-1)]),
                                                            JoinedStr(
                                                                values=[
                                                                    Constant(value='- duration:    '),
                                                                    FormattedValue(
                                                                        value=Name(id='duration', ctx=Load()),
                                                                        conversion=-1,
                                                                        format_spec=JoinedStr(
                                                                            values=[
                                                                                Constant(value='.3f')])),
                                                                    Constant(value='s')]),
                                                            BinOp(
                                                                left=Constant(value='-'),
                                                                op=Mult(),
                                                                right=Constant(value=90)),
                                                            Constant(value='')],
                                                        ctx=Load())],
                                                keywords=[])],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='buffer', ctx=Load()),
                            attr='clear',
                            ctx=Load()),
                        args=[],
                        keywords=[]))],
            decorator_list=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value='oops')],
                keywords=[]))],
    type_ignores=[])
Module(
    body=[
        ImportFrom(
            module='__future__',
            names=[
                alias(name='annotations')],
            level=0),
        Import(
            names=[
                alias(name='collections')]),
        Import(
            names=[
                alias(name='json')]),
        Import(
            names=[
                alias(name='os')]),
        Import(
            names=[
                alias(name='sys')]),
        Import(
            names=[
                alias(name='threading')]),
        Import(
            names=[
                alias(name='traceback')]),
        Assign(
            targets=[
                Name(id='indexToSymbol', ctx=Store())],
            value=Constant(value=None)),
        Assign(
            targets=[
                Name(id='indexToCallSite', ctx=Store())],
            value=Constant(value=None)),
        Assign(
            targets=[
                Name(id='symbolToIndex', ctx=Store())],
            value=Constant(value=None)),
        Assign(
            targets=[
                Name(id='callSiteToIndex', ctx=Store())],
            value=Constant(value=None)),
        Assign(
            targets=[
                Name(id='lock', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Name(id='threading', ctx=Load()),
                    attr='Lock',
                    ctx=Load()),
                args=[],
                keywords=[])),
        Assign(
            targets=[
                Name(id='KB', ctx=Store())],
            value=Constant(value=1024)),
        Assign(
            targets=[
                Name(id='MB', ctx=Store())],
            value=BinOp(
                left=Name(id='KB', ctx=Load()),
                op=Mult(),
                right=Name(id='KB', ctx=Load()))),
        Assign(
            targets=[
                Name(id='GB', ctx=Store())],
            value=BinOp(
                left=Name(id='MB', ctx=Load()),
                op=Mult(),
                right=Name(id='KB', ctx=Load()))),
        ClassDef(
            name='Call',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='when',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='threadId',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='callSite',
                                annotation=Name(id='CallSite', ctx=Load())),
                            arg(
                                arg='callerSite',
                                annotation=Name(id='CallSite', ctx=Load())),
                            arg(
                                arg='depth',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='duration',
                                annotation=Name(id='float', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=0.0)]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='when',
                                    ctx=Store())],
                            value=Name(id='when', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='threadId', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='threadId should be a number')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='threadId',
                                    ctx=Store())],
                            value=Name(id='threadId', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='callSite', ctx=Load()),
                                    Name(id='CallSite', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='callSite should be a CallSite, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='callSite', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='callSite', ctx=Load()),
                                        conversion=-1)])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='callSite',
                                    ctx=Store())],
                            value=Name(id='callSite', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='callerSite',
                                    ctx=Store())],
                            value=Name(id='callerSite', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='depth',
                                    ctx=Store())],
                            value=Name(id='depth', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='duration',
                                    ctx=Store())],
                            value=Name(id='duration', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='unmarshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='cls'),
                            arg(arg='event')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='_', ctx=Store()),
                                        Name(id='threadIdIndex', ctx=Store()),
                                        Name(id='callSiteIndex', ctx=Store()),
                                        Name(id='callerIndex', ctx=Store()),
                                        Name(id='depth', ctx=Store()),
                                        Name(id='whenIndex', ctx=Store()),
                                        Name(id='durationIndex', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='event', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='threadIdIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='threadIdIndex should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='callSiteIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='callSiteIndex should be a number')),
                        Assert(
                            test=Compare(
                                left=Name(id='callSiteIndex', ctx=Load()),
                                ops=[
                                    In()],
                                comparators=[
                                    Name(id='indexToCallSite', ctx=Load())]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='callSiteIndex '),
                                    FormattedValue(
                                        value=Name(id='callSiteIndex', ctx=Load()),
                                        conversion=-1),
                                    Constant(value=' not in '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='list', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Attribute(
                                                        value=Name(id='indexToCallSite', ctx=Load()),
                                                        attr='keys',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])],
                                            keywords=[]),
                                        conversion=-1)])),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='callerIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='callerIndex should be a number')),
                        Assert(
                            test=Compare(
                                left=Name(id='callerIndex', ctx=Load()),
                                ops=[
                                    In()],
                                comparators=[
                                    Name(id='indexToCallSite', ctx=Load())]),
                            msg=Constant(value='callerIndex unknown')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='depth', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='depth should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='whenIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='whenIndex should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='durationIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='durationIndex should be a number')),
                        Return(
                            value=Call(
                                func=Name(id='Call', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='whenIndex', ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='threadIdIndex', ctx=Load())],
                                        keywords=[]),
                                    Subscript(
                                        value=Name(id='indexToCallSite', ctx=Load()),
                                        slice=Name(id='callSiteIndex', ctx=Load()),
                                        ctx=Load()),
                                    Subscript(
                                        value=Name(id='indexToCallSite', ctx=Load()),
                                        slice=Name(id='callerIndex', ctx=Load()),
                                        ctx=Load()),
                                    Name(id='depth', ctx=Load()),
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='durationIndex', ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Name(id='Call', ctx=Load())),
                FunctionDef(
                    name='marshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='when'),
                            arg(arg='threadId'),
                            arg(arg='caller')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='when', ctx=Store())],
                            value=Name(id='when', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='duration',
                                    ctx=Store())],
                            value=BinOp(
                                left=Name(id='when', ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='when',
                                    ctx=Load()))),
                        Assign(
                            targets=[
                                Name(id='callSiteIndex', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='getCallSiteIndex',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='callerSiteIndex', ctx=Store())],
                            value=IfExp(
                                test=Name(id='caller', ctx=Load()),
                                body=Call(
                                    func=Attribute(
                                        value=Name(id='caller', ctx=Load()),
                                        attr='getCallSiteIndex',
                                        ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                orelse=Constant(value=0))),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='put',
                                    ctx=Load()),
                                args=[
                                    Tuple(
                                        elts=[
                                            Attribute(
                                                value=Name(id='config', ctx=Load()),
                                                attr='EVENT_KIND_CALL',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Name(id='threadId', ctx=Load())],
                                                keywords=[]),
                                            Name(id='callSiteIndex', ctx=Load()),
                                            Name(id='callerSiteIndex', ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='depth',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='round', ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='when',
                                                                ctx=Load()),
                                                            Constant(value=3)],
                                                        keywords=[])],
                                                keywords=[]),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='round', ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='duration',
                                                                ctx=Load()),
                                                            Constant(value=3)],
                                                        keywords=[])],
                                                keywords=[])],
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='getCallSiteIndex',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='call', ctx=Store())],
                            value=Tuple(
                                elts=[
                                    Call(
                                        func=Name(id='indexSymbol', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='callSite',
                                                    ctx=Load()),
                                                attr='filename',
                                                ctx=Load())],
                                        keywords=[]),
                                    Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='callSite',
                                            ctx=Load()),
                                        attr='lineno',
                                        ctx=Load()),
                                    Call(
                                        func=Name(id='indexSymbol', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='callSite',
                                                    ctx=Load()),
                                                attr='name',
                                                ctx=Load())],
                                        keywords=[])],
                                ctx=Load())),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Compare(
                                    left=Name(id='call', ctx=Load()),
                                    ops=[
                                        In()],
                                    comparators=[
                                        Name(id='callSiteToIndex', ctx=Load())])),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='log', ctx=Load()),
                                            attr='put',
                                            ctx=Load()),
                                        args=[
                                            Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='config', ctx=Load()),
                                                        attr='EVENT_KIND_CALLSITE',
                                                        ctx=Load()),
                                                    Call(
                                                        func=Name(id='len', ctx=Load()),
                                                        args=[
                                                            Name(id='indexToCallSite', ctx=Load())],
                                                        keywords=[]),
                                                    Starred(
                                                        value=Name(id='call', ctx=Load()),
                                                        ctx=Load())],
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='callSiteIndex', ctx=Store())],
                            value=Subscript(
                                value=Name(id='callSiteToIndex', ctx=Load()),
                                slice=Name(id='call', ctx=Load()),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Name(id='indexToCallSite', ctx=Load()),
                                    slice=Name(id='callSiteIndex', ctx=Load()),
                                    ctx=Store())],
                            value=Name(id='call', ctx=Load())),
                        Return(
                            value=Name(id='callSiteIndex', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='isSimilar',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='other',
                                annotation=Name(id='Call', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load()),
                                            attr='isSimilar',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callerSite',
                                                ctx=Load()),
                                            attr='isSimilar',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='callerSite',
                                                ctx=Load())],
                                        keywords=[])]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='other',
                                annotation=Name(id='Call', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='callSite',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='callerSite',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='callerSite',
                                                ctx=Load())])]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__hash__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='hash', ctx=Load()),
                                args=[
                                    Tuple(
                                        elts=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callerSite',
                                                ctx=Load())],
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=JoinedStr(
                                values=[
                                    Constant(value='<Call '),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value='@'),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load()),
                                            attr='lineno',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value='>')]))],
                    decorator_list=[])],
            decorator_list=[]),
        FunctionDef(
            name='memoize',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='function')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='memo', ctx=Store())],
                    value=Dict(keys=[], values=[])),
                FunctionDef(
                    name='helper',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='x')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Compare(
                                left=Name(id='x', ctx=Load()),
                                ops=[
                                    NotIn()],
                                comparators=[
                                    Name(id='memo', ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Name(id='memo', ctx=Load()),
                                            slice=Name(id='x', ctx=Load()),
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='function', ctx=Load()),
                                        args=[
                                            Name(id='x', ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Subscript(
                                value=Name(id='memo', ctx=Load()),
                                slice=Name(id='x', ctx=Load()),
                                ctx=Load()))],
                    decorator_list=[]),
                Return(
                    value=Name(id='helper', ctx=Load()))],
            decorator_list=[]),
        FunctionDef(
            name='absolutePath',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='filename')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='os', ctx=Load()),
                                attr='path',
                                ctx=Load()),
                            attr='abspath',
                            ctx=Load()),
                        args=[
                            Name(id='filename', ctx=Load())],
                        keywords=[]))],
            decorator_list=[]),
        ClassDef(
            name='CallSite',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='filename'),
                            arg(arg='lineno'),
                            arg(arg='name')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='filename',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='absolutePath', ctx=Load()),
                                args=[
                                    Name(id='filename', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lineno',
                                    ctx=Store())],
                            value=BoolOp(
                                op=Or(),
                                values=[
                                    Name(id='lineno', ctx=Load()),
                                    Constant(value=0)])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='name',
                                    ctx=Store())],
                            value=Name(id='name', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='unmarshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='cls'),
                            arg(arg='event')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='_', ctx=Store()),
                                        Name(id='callSiteIndex', ctx=Store()),
                                        Name(id='filenameIndex', ctx=Store()),
                                        Name(id='lineno', ctx=Store()),
                                        Name(id='nameIndex', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='event', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='callSiteIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='callsiteIndex should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='filenameIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='filenameIndex should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='lineno', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='lineno should be a number')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='nameIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='nameIndex should be a number')),
                        Assign(
                            targets=[
                                Name(id='filename', ctx=Store())],
                            value=Call(
                                func=Name(id='getSymbol', ctx=Load()),
                                args=[
                                    Name(id='filenameIndex', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='name', ctx=Store())],
                            value=Call(
                                func=Name(id='getSymbol', ctx=Load()),
                                args=[
                                    Name(id='nameIndex', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='callSite', ctx=Store())],
                            value=Call(
                                func=Name(id='CallSite', ctx=Load()),
                                args=[
                                    Name(id='filename', ctx=Load()),
                                    Name(id='lineno', ctx=Load()),
                                    Name(id='name', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Name(id='indexToCallSite', ctx=Load()),
                                    slice=Name(id='callSiteIndex', ctx=Load()),
                                    ctx=Store())],
                            value=Name(id='callSite', ctx=Load())),
                        Return(
                            value=Name(id='callSite', ctx=Load()))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())]),
                FunctionDef(
                    name='isSimilar',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='other',
                                annotation=Name(id='CallSite', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='filename',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='filename',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='lineno',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='lineno',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='name',
                                                ctx=Load())])]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='other')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='name',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='other', ctx=Load()),
                                        attr='name',
                                        ctx=Load())]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__hash__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='hash', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='str', ctx=Load()),
                                        args=[
                                            Name(id='self', ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=JoinedStr(
                                values=[
                                    Constant(value='<CallSite '),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='filename',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value=':'),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value=':'),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='lineno',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value='>')]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='Stack',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='when'),
                            arg(arg='threadId'),
                            arg(arg='startFrame')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=0),
                            Constant(value=0),
                            Constant(value=None)]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='when',
                                    ctx=Store())],
                            value=BoolOp(
                                op=Or(),
                                values=[
                                    Name(id='when', ctx=Load()),
                                    Call(
                                        func=Attribute(
                                            value=Name(id='log', ctx=Load()),
                                            attr='now',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='calls',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load())),
                        If(
                            test=Name(id='startFrame', ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='callerSite', ctx=Store())],
                                    value=Constant(value=None)),
                                For(
                                    target=Tuple(
                                        elts=[
                                            Name(id='depth', ctx=Store()),
                                            Name(id='frameLineno', ctx=Store())],
                                        ctx=Store()),
                                    iter=Call(
                                        func=Name(id='enumerate', ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='walkStack',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='startFrame', ctx=Load())],
                                                keywords=[])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Name(id='frame', ctx=Store()),
                                                        Name(id='lineno', ctx=Store())],
                                                    ctx=Store())],
                                            value=Name(id='frameLineno', ctx=Load())),
                                        Assign(
                                            targets=[
                                                Name(id='callSite', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='callSiteFromFrame',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='frame', ctx=Load()),
                                                    Name(id='lineno', ctx=Load())],
                                                keywords=[])),
                                        If(
                                            test=UnaryOp(
                                                op=Not(),
                                                operand=Name(id='callSite', ctx=Load())),
                                            body=[
                                                Break()],
                                            orelse=[]),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='calls',
                                                        ctx=Load()),
                                                    attr='append',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='Call', ctx=Load()),
                                                        args=[
                                                            Name(id='when', ctx=Load()),
                                                            Name(id='threadId', ctx=Load()),
                                                            Name(id='callSite', ctx=Load()),
                                                            Name(id='callerSite', ctx=Load()),
                                                            Name(id='depth', ctx=Load()),
                                                            Constant(value=0)],
                                                        keywords=[])],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='callerSite', ctx=Store())],
                                            value=Name(id='callSite', ctx=Load()))],
                                    orelse=[])],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='walkStack',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='startFrame')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='stack', ctx=Store())],
                            value=ListComp(
                                elt=Tuple(
                                    elts=[
                                        Name(id='frame', ctx=Load()),
                                        Name(id='lineno', ctx=Load())],
                                    ctx=Load()),
                                generators=[
                                    comprehension(
                                        target=Tuple(
                                            elts=[
                                                Name(id='frame', ctx=Store()),
                                                Name(id='lineno', ctx=Store())],
                                            ctx=Store()),
                                        iter=Call(
                                            func=Name(id='reversed', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Name(id='list', ctx=Load()),
                                                    args=[
                                                        Call(
                                                            func=Attribute(
                                                                value=Name(id='traceback', ctx=Load()),
                                                                attr='walk_stack',
                                                                ctx=Load()),
                                                            args=[
                                                                Name(id='startFrame', ctx=Load())],
                                                            keywords=[])],
                                                    keywords=[])],
                                            keywords=[]),
                                        ifs=[],
                                        is_async=0)])),
                        Return(
                            value=Name(id='stack', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='callSiteFromFrame',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='frame'),
                            arg(arg='lineno')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='filename', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='frame', ctx=Load()),
                                                attr='f_globals',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='__file__'),
                                            Constant(value='')],
                                        keywords=[]),
                                    attr='replace',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='path',
                                                ctx=Load()),
                                            attr='expanduser',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='~')],
                                        keywords=[]),
                                    Constant(value='~')],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='module', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='frame', ctx=Load()),
                                        attr='f_globals',
                                        ctx=Load()),
                                    attr='get',
                                    ctx=Load()),
                                args=[
                                    Constant(value='__name__'),
                                    Constant(value='')],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Name(id='module', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value='__main__')]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='module', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Attribute(
                                                    value=Subscript(
                                                        value=Attribute(
                                                            value=Name(id='sys', ctx=Load()),
                                                            attr='argv',
                                                            ctx=Load()),
                                                        slice=Constant(value=0),
                                                        ctx=Load()),
                                                    attr='replace',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='.py'),
                                                    Constant(value='')],
                                                keywords=[]),
                                            attr='replace',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='/'),
                                            Constant(value='.')],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='instance', ctx=Store())],
                            value=IfExp(
                                test=Compare(
                                    left=Constant(value='self'),
                                    ops=[
                                        In()],
                                    comparators=[
                                        Attribute(
                                            value=Name(id='frame', ctx=Load()),
                                            attr='f_locals',
                                            ctx=Load())]),
                                body=Subscript(
                                    value=Attribute(
                                        value=Name(id='frame', ctx=Load()),
                                        attr='f_locals',
                                        ctx=Load()),
                                    slice=Constant(value='self'),
                                    ctx=Load()),
                                orelse=Constant(value=None))),
                        Assign(
                            targets=[
                                Name(id='clazz', ctx=Store())],
                            value=Constant(value='')),
                        If(
                            test=Compare(
                                left=Name(id='instance', ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='clazz', ctx=Store())],
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='instance', ctx=Load()),
                                            attr='__class__',
                                            ctx=Load()),
                                        attr='__name__',
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Name(id='module', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='instance', ctx=Load()),
                                        attr='__module__',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='name', ctx=Store())],
                            value=Attribute(
                                value=Attribute(
                                    value=Name(id='frame', ctx=Load()),
                                    attr='f_code',
                                    ctx=Load()),
                                attr='co_name',
                                ctx=Load())),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='ignore',
                                    ctx=Load()),
                                args=[
                                    Name(id='module', ctx=Load())],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Constant(value=None))],
                            orelse=[]),
                        Return(
                            value=Call(
                                func=Name(id='CallSite', ctx=Load()),
                                args=[
                                    Name(id='filename', ctx=Load()),
                                    Name(id='lineno', ctx=Load()),
                                    JoinedStr(
                                        values=[
                                            FormattedValue(
                                                value=Name(id='module', ctx=Load()),
                                                conversion=-1),
                                            Constant(value='.'),
                                            FormattedValue(
                                                value=Name(id='clazz', ctx=Load()),
                                                conversion=-1),
                                            Constant(value='.'),
                                            FormattedValue(
                                                value=Name(id='name', ctx=Load()),
                                                conversion=-1)])],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='ignore',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='module')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        Return(
                            value=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Name(id='module', ctx=Load()),
                                        ops=[
                                            In()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='config', ctx=Load()),
                                                attr='IGNORE_MODULES',
                                                ctx=Load())]),
                                    Call(
                                        func=Attribute(
                                            value=Name(id='module', ctx=Load()),
                                            attr='startswith',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='importlib.')],
                                        keywords=[])]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__iter__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='iter', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='calls',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__len__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='len', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='calls',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__getitem__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='index')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='calls',
                                    ctx=Load()),
                                slice=Name(id='index', ctx=Load()),
                                ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='calls', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Constant(value='\n  '),
                                    attr='join',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='map', ctx=Load()),
                                        args=[
                                            Name(id='str', ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='calls',
                                                ctx=Load())],
                                        keywords=[])],
                                keywords=[])),
                        Return(
                            value=JoinedStr(
                                values=[
                                    Constant(value='<Stack\n  '),
                                    FormattedValue(
                                        value=Name(id='calls', ctx=Load()),
                                        conversion=-1),
                                    Constant(value='\n>')]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='MarkerModel',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='kind',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='when',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='message',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='stack',
                                annotation=Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='str', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='when',
                                    ctx=Store())],
                            value=Name(id='when', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='kind',
                                    ctx=Store())],
                            value=Name(id='kind', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='message',
                                    ctx=Store())],
                            value=Name(id='message', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Store())],
                            value=Name(id='stack', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='duration',
                                    ctx=Store())],
                            value=Constant(value=0.1))],
                    decorator_list=[]),
                FunctionDef(
                    name='unmarshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='cls'),
                            arg(
                                arg='event',
                                annotation=Name(id='list', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='kind', ctx=Store()),
                                        Name(id='when', ctx=Store()),
                                        Name(id='messageIndex', ctx=Store()),
                                        Name(id='stack', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='event', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='kind', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='kind should be an int')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='when', ctx=Load()),
                                    Name(id='float', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='when should be a float')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='messageIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=Constant(value='messageIndex should be an int')),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='stack', ctx=Load()),
                                    Name(id='list', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='stack should be a list, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='stack', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='stack', ctx=Load()),
                                        conversion=-1)])),
                        Return(
                            value=Call(
                                func=Name(id='MarkerModel', ctx=Load()),
                                args=[
                                    Name(id='kind', ctx=Load()),
                                    Name(id='when', ctx=Load()),
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='messageIndex', ctx=Load())],
                                        keywords=[]),
                                    ListComp(
                                        elt=Call(
                                            func=Attribute(
                                                value=Call(
                                                    func=Name(id='getSymbol', ctx=Load()),
                                                    args=[
                                                        Name(id='index', ctx=Load())],
                                                    keywords=[]),
                                                attr='replace',
                                                ctx=Load()),
                                            args=[
                                                Constant(value='\\n'),
                                                Constant(value='\n')],
                                            keywords=[]),
                                        generators=[
                                            comprehension(
                                                target=Name(id='index', ctx=Store()),
                                                iter=Name(id='stack', ctx=Load()),
                                                ifs=[],
                                                is_async=0)])],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Name(id='MarkerModel', ctx=Load())),
                FunctionDef(
                    name='marshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='put',
                                    ctx=Load()),
                                args=[
                                    List(
                                        elts=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='kind',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='when',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='message',
                                                        ctx=Load())],
                                                keywords=[]),
                                            ListComp(
                                                elt=Call(
                                                    func=Name(id='indexSymbol', ctx=Load()),
                                                    args=[
                                                        Name(id='line', ctx=Load())],
                                                    keywords=[]),
                                                generators=[
                                                    comprehension(
                                                        target=Name(id='line', ctx=Store()),
                                                        iter=Subscript(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='stack',
                                                                ctx=Load()),
                                                            slice=Slice(
                                                                upper=UnaryOp(
                                                                    op=USub(),
                                                                    operand=Constant(value=2))),
                                                            ctx=Load()),
                                                        ifs=[
                                                            UnaryOp(
                                                                op=Not(),
                                                                operand=Compare(
                                                                    left=Constant(value='microlog/microlog/__init__.py'),
                                                                    ops=[
                                                                        In()],
                                                                    comparators=[
                                                                        Name(id='line', ctx=Load())]))],
                                                        is_async=0)])],
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='System',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='cpu'),
                            arg(arg='memoryTotal'),
                            arg(arg='memoryFree')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='cpu',
                                    ctx=Store())],
                            value=Name(id='cpu', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='memoryTotal',
                                    ctx=Store())],
                            value=Name(id='memoryTotal', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='memoryFree',
                                    ctx=Store())],
                            value=Name(id='memoryFree', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='other')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='cpu',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='cpu',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='memoryFree',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='memoryFree',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='memoryTotal',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='memoryTotal',
                                                ctx=Load())])]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='Python',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='moduleCount')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='moduleCount',
                                    ctx=Store())],
                            value=Name(id='moduleCount', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='other')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='moduleCount',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='moduleCount',
                                                ctx=Load())])]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='Process',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='cpu'),
                            arg(arg='memory')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='cpu',
                                    ctx=Store())],
                            value=Name(id='cpu', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='memory',
                                    ctx=Store())],
                            value=Name(id='memory', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='other')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='cpu',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='cpu',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='memory',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='memory',
                                                ctx=Load())])]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='Status',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='when'),
                            arg(
                                arg='system',
                                annotation=Name(id='System', ctx=Load())),
                            arg(
                                arg='process',
                                annotation=Name(id='Process', ctx=Load())),
                            arg(
                                arg='python',
                                annotation=Name(id='Python', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='when', ctx=Load()),
                                    Name(id='float', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='when should be a float, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='when', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='when', ctx=Load()),
                                        conversion=-1)])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='when',
                                    ctx=Store())],
                            value=Name(id='when', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='system',
                                    ctx=Store())],
                            value=Name(id='system', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='process',
                                    ctx=Store())],
                            value=Name(id='process', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='python',
                                    ctx=Store())],
                            value=Name(id='python', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='duration',
                                    ctx=Store())],
                            value=Constant(value=0))],
                    decorator_list=[]),
                FunctionDef(
                    name='unmarshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='cls'),
                            arg(
                                arg='event',
                                annotation=Name(id='list', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='_', ctx=Store()),
                                        Name(id='whenIndex', ctx=Store()),
                                        Name(id='dataIndex', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='event', ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='whenIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='whenIndex should be an int, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='whenIndex', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='whenIndex', ctx=Load()),
                                        conversion=-1)])),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='dataIndex', ctx=Load()),
                                    Name(id='int', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='dataIndex should be an int, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='dataIndex', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='dataIndex', ctx=Load()),
                                        conversion=-1)])),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='dataIndex', ctx=Load())],
                                        keywords=[]),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            msg=JoinedStr(
                                values=[
                                    Constant(value='data symbol should be a str, not '),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Name(id='getSymbol', ctx=Load()),
                                                    args=[
                                                        Name(id='dataIndex', ctx=Load())],
                                                    keywords=[])],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=': '),
                                    FormattedValue(
                                        value=Name(id='dataIndex', ctx=Load()),
                                        conversion=-1),
                                    Constant(value=':'),
                                    FormattedValue(
                                        value=Call(
                                            func=Name(id='getSymbol', ctx=Load()),
                                            args=[
                                                Name(id='dataIndex', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1)])),
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='system', ctx=Store()),
                                        Name(id='process', ctx=Store()),
                                        Name(id='python', ctx=Store())],
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='json', ctx=Load()),
                                    attr='loads',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='dataIndex', ctx=Load())],
                                        keywords=[])],
                                keywords=[])),
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='systemCpu', ctx=Store()),
                                        Name(id='systemMemoryTotal', ctx=Store()),
                                        Name(id='systemMemoryFree', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='system', ctx=Load())),
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='cpu', ctx=Store()),
                                        Name(id='memory', ctx=Store())],
                                    ctx=Store())],
                            value=Name(id='process', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='moduleCount', ctx=Store())],
                            value=Subscript(
                                value=Name(id='python', ctx=Load()),
                                slice=Constant(value=0),
                                ctx=Load())),
                        Return(
                            value=Call(
                                func=Name(id='Status', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='getSymbol', ctx=Load()),
                                        args=[
                                            Name(id='whenIndex', ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='System', ctx=Load()),
                                        args=[
                                            Name(id='systemCpu', ctx=Load()),
                                            Name(id='systemMemoryTotal', ctx=Load()),
                                            Name(id='systemMemoryFree', ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='Process', ctx=Load()),
                                        args=[
                                            Name(id='cpu', ctx=Load()),
                                            Name(id='memory', ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='Python', ctx=Load()),
                                        args=[
                                            Name(id='moduleCount', ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())]),
                FunctionDef(
                    name='marshall',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='put',
                                    ctx=Load()),
                                args=[
                                    List(
                                        elts=[
                                            Attribute(
                                                value=Name(id='config', ctx=Load()),
                                                attr='EVENT_KIND_STATUS',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='round', ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='when',
                                                                ctx=Load()),
                                                            Constant(value=3)],
                                                        keywords=[])],
                                                keywords=[]),
                                            Call(
                                                func=Name(id='indexSymbol', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='json', ctx=Load()),
                                                            attr='dumps',
                                                            ctx=Load()),
                                                        args=[
                                                            List(
                                                                elts=[
                                                                    List(
                                                                        elts=[
                                                                            Call(
                                                                                func=Name(id='round', ctx=Load()),
                                                                                args=[
                                                                                    Attribute(
                                                                                        value=Attribute(
                                                                                            value=Name(id='self', ctx=Load()),
                                                                                            attr='system',
                                                                                            ctx=Load()),
                                                                                        attr='cpu',
                                                                                        ctx=Load())],
                                                                                keywords=[]),
                                                                            Call(
                                                                                func=Name(id='round', ctx=Load()),
                                                                                args=[
                                                                                    BinOp(
                                                                                        left=Attribute(
                                                                                            value=Attribute(
                                                                                                value=Name(id='self', ctx=Load()),
                                                                                                attr='system',
                                                                                                ctx=Load()),
                                                                                            attr='memoryTotal',
                                                                                            ctx=Load()),
                                                                                        op=Div(),
                                                                                        right=Name(id='GB', ctx=Load())),
                                                                                    Constant(value=1)],
                                                                                keywords=[]),
                                                                            Call(
                                                                                func=Name(id='round', ctx=Load()),
                                                                                args=[
                                                                                    BinOp(
                                                                                        left=Attribute(
                                                                                            value=Attribute(
                                                                                                value=Name(id='self', ctx=Load()),
                                                                                                attr='system',
                                                                                                ctx=Load()),
                                                                                            attr='memoryFree',
                                                                                            ctx=Load()),
                                                                                        op=Div(),
                                                                                        right=Name(id='GB', ctx=Load())),
                                                                                    Constant(value=1)],
                                                                                keywords=[])],
                                                                        ctx=Load()),
                                                                    List(
                                                                        elts=[
                                                                            Call(
                                                                                func=Name(id='round', ctx=Load()),
                                                                                args=[
                                                                                    Attribute(
                                                                                        value=Attribute(
                                                                                            value=Name(id='self', ctx=Load()),
                                                                                            attr='process',
                                                                                            ctx=Load()),
                                                                                        attr='cpu',
                                                                                        ctx=Load())],
                                                                                keywords=[]),
                                                                            Call(
                                                                                func=Name(id='round', ctx=Load()),
                                                                                args=[
                                                                                    BinOp(
                                                                                        left=Attribute(
                                                                                            value=Attribute(
                                                                                                value=Name(id='self', ctx=Load()),
                                                                                                attr='process',
                                                                                                ctx=Load()),
                                                                                            attr='memory',
                                                                                            ctx=Load()),
                                                                                        op=Div(),
                                                                                        right=Name(id='GB', ctx=Load())),
                                                                                    Constant(value=1)],
                                                                                keywords=[])],
                                                                        ctx=Load()),
                                                                    List(
                                                                        elts=[
                                                                            Attribute(
                                                                                value=Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='python',
                                                                                    ctx=Load()),
                                                                                attr='moduleCount',
                                                                                ctx=Load())],
                                                                        ctx=Load())],
                                                                ctx=Load())],
                                                        keywords=[])],
                                                keywords=[])],
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='__eq__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='other')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='other', ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='system',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='system',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='process',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='process',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='python',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='other', ctx=Load()),
                                                attr='python',
                                                ctx=Load())])]))],
                    decorator_list=[])],
            decorator_list=[]),
        FunctionDef(
            name='toGB',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='amount')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                If(
                    test=Compare(
                        left=BinOp(
                            left=Name(id='amount', ctx=Load()),
                            op=Div(),
                            right=Name(id='GB', ctx=Load())),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=1)]),
                    body=[
                        Return(
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=BinOp(
                                            left=Name(id='amount', ctx=Load()),
                                            op=Div(),
                                            right=Name(id='GB', ctx=Load())),
                                        conversion=-1,
                                        format_spec=JoinedStr(
                                            values=[
                                                Constant(value='.1f')])),
                                    Constant(value='GB')]))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=BinOp(
                            left=Name(id='amount', ctx=Load()),
                            op=Div(),
                            right=Name(id='MB', ctx=Load())),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=1)]),
                    body=[
                        Return(
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=BinOp(
                                            left=Name(id='amount', ctx=Load()),
                                            op=Div(),
                                            right=Name(id='MB', ctx=Load())),
                                        conversion=-1,
                                        format_spec=JoinedStr(
                                            values=[
                                                Constant(value='.1f')])),
                                    Constant(value='MB')]))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=BinOp(
                            left=Name(id='amount', ctx=Load()),
                            op=Div(),
                            right=Name(id='KB', ctx=Load())),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=1)]),
                    body=[
                        Return(
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=BinOp(
                                            left=Name(id='amount', ctx=Load()),
                                            op=Div(),
                                            right=Name(id='KB', ctx=Load())),
                                        conversion=-1,
                                        format_spec=JoinedStr(
                                            values=[
                                                Constant(value='.1f')])),
                                    Constant(value='KB')]))],
                    orelse=[]),
                Return(
                    value=JoinedStr(
                        values=[
                            FormattedValue(
                                value=Name(id='amount', ctx=Load()),
                                conversion=-1),
                            Constant(value=' bytes')]))],
            decorator_list=[]),
        ClassDef(
            name='Memory',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='previous',
                                    ctx=Store())],
                            value=Constant(value=None)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hpy',
                                    ctx=Store())],
                            value=Constant(value=None))],
                    decorator_list=[]),
                FunctionDef(
                    name='sample',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Import(
                            names=[
                                alias(name='guppy')]),
                        Import(
                            names=[
                                alias(name='psutil')]),
                        ImportFrom(
                            module='microlog.api',
                            names=[
                                alias(name='debug')],
                            level=0),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hpy',
                                    ctx=Load())),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='hpy',
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='guppy', ctx=Load()),
                                            attr='hpy',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='sample', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='hpy',
                                        ctx=Load()),
                                    attr='heap',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='diff', ctx=Store())],
                            value=IfExp(
                                test=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='previous',
                                    ctx=Load()),
                                body=BinOp(
                                    left=Name(id='sample', ctx=Load()),
                                    op=Sub(),
                                    right=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='previous',
                                        ctx=Load())),
                                orelse=Constant(value='None'))),
                        Expr(
                            value=Call(
                                func=Name(id='debug', ctx=Load()),
                                args=[
                                    JoinedStr(
                                        values=[
                                            Constant(value='\n            # Python memory analysis \n            \n            System memory total: '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='toGB', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='psutil', ctx=Load()),
                                                                    attr='virtual_memory',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            attr='total',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='<br>\n            System memory used: '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='toGB', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='psutil', ctx=Load()),
                                                                    attr='virtual_memory',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            attr='used',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='<br>\n            Process memory size: '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='toGB', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='psutil', ctx=Load()),
                                                                            attr='Process',
                                                                            ctx=Load()),
                                                                        args=[],
                                                                        keywords=[]),
                                                                    attr='memory_info',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            attr='rss',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='<br>\n            Heap Size: '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='toGB', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Name(id='sample', ctx=Load()),
                                                            attr='size',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='\n            \n            ## Current heap snapshot\n            ```\n            '),
                                            FormattedValue(
                                                value=Attribute(
                                                    value=Name(id='sample', ctx=Load()),
                                                    attr='byrcs',
                                                    ctx=Load()),
                                                conversion=-1),
                                            Constant(value='\n            ```\n\n            ## Difference with previous snapshot\n            ```\n            '),
                                            FormattedValue(
                                                value=Name(id='diff', ctx=Load()),
                                                conversion=-1),
                                            Constant(value='\n            ```\n        ')])],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='previous',
                                    ctx=Store())],
                            value=Name(id='sample', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='stop',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Pass()],
                    decorator_list=[])],
            decorator_list=[]),
        FunctionDef(
            name='indexSymbol',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='symbol')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                With(
                    items=[
                        withitem(
                            context_expr=Name(id='lock', ctx=Load()))],
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='symbol', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='symbol', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='symbol', ctx=Load()),
                                                    attr='replace',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='\n'),
                                                    Constant(value='\\n')],
                                                keywords=[]),
                                            attr='replace',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='"'),
                                            Constant(value='\\"')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Compare(
                                    left=Name(id='symbol', ctx=Load()),
                                    ops=[
                                        In()],
                                    comparators=[
                                        Name(id='symbolToIndex', ctx=Load())])),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='log', ctx=Load()),
                                            attr='put',
                                            ctx=Load()),
                                        args=[
                                            Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='config', ctx=Load()),
                                                        attr='EVENT_KIND_SYMBOL',
                                                        ctx=Load()),
                                                    Subscript(
                                                        value=Name(id='symbolToIndex', ctx=Load()),
                                                        slice=Name(id='symbol', ctx=Load()),
                                                        ctx=Load()),
                                                    Name(id='symbol', ctx=Load())],
                                                ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Name(id='indexToSymbol', ctx=Load()),
                                            slice=Subscript(
                                                value=Name(id='symbolToIndex', ctx=Load()),
                                                slice=Name(id='symbol', ctx=Load()),
                                                ctx=Load()),
                                            ctx=Store())],
                                    value=Name(id='symbol', ctx=Load()))],
                            orelse=[]),
                        Return(
                            value=Subscript(
                                value=Name(id='symbolToIndex', ctx=Load()),
                                slice=Name(id='symbol', ctx=Load()),
                                ctx=Load()))])],
            decorator_list=[]),
        FunctionDef(
            name='unmarshallSymbol',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='event')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Subscript(
                                value=Name(id='event', ctx=Load()),
                                slice=Constant(value=1),
                                ctx=Load()),
                            Name(id='int', ctx=Load())],
                        keywords=[]),
                    msg=Constant(value='symbol[1] should be an int')),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Subscript(
                                value=Name(id='event', ctx=Load()),
                                slice=Constant(value=2),
                                ctx=Load()),
                            Tuple(
                                elts=[
                                    Name(id='float', ctx=Load()),
                                    Name(id='int', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load())],
                        keywords=[]),
                    msg=JoinedStr(
                        values=[
                            Constant(value='symbol[2] should be a literal, not '),
                            FormattedValue(
                                value=Call(
                                    func=Name(id='type', ctx=Load()),
                                    args=[
                                        Subscript(
                                            value=Name(id='event', ctx=Load()),
                                            slice=Constant(value=2),
                                            ctx=Load())],
                                    keywords=[]),
                                conversion=-1),
                            Constant(value=': '),
                            FormattedValue(
                                value=Subscript(
                                    value=Name(id='event', ctx=Load()),
                                    slice=Constant(value=2),
                                    ctx=Load()),
                                conversion=-1)])),
                Expr(
                    value=Call(
                        func=Name(id='putSymbol', ctx=Load()),
                        args=[
                            Subscript(
                                value=Name(id='event', ctx=Load()),
                                slice=Constant(value=1),
                                ctx=Load()),
                            Subscript(
                                value=Name(id='event', ctx=Load()),
                                slice=Constant(value=2),
                                ctx=Load())],
                        keywords=[])),
                Return(
                    value=Subscript(
                        value=Name(id='event', ctx=Load()),
                        slice=Constant(value=2),
                        ctx=Load()))],
            decorator_list=[]),
        FunctionDef(
            name='putSymbol',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='index'),
                    arg(arg='symbol')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assert(
                    test=Compare(
                        left=Name(id='index', ctx=Load()),
                        ops=[
                            NotIn()],
                        comparators=[
                            Name(id='indexToSymbol', ctx=Load())]),
                    msg=JoinedStr(
                        values=[
                            Constant(value='duplicate symbol '),
                            FormattedValue(
                                value=Name(id='index', ctx=Load()),
                                conversion=-1),
                            Constant(value=', '),
                            FormattedValue(
                                value=Name(id='symbol', ctx=Load()),
                                conversion=-1)])),
                If(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='symbol', ctx=Load()),
                            Name(id='str', ctx=Load())],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='symbol', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='symbol', ctx=Load()),
                                    attr='replace',
                                    ctx=Load()),
                                args=[
                                    Constant(value='\n'),
                                    Constant(value='\\n')],
                                keywords=[]))],
                    orelse=[]),
                Assign(
                    targets=[
                        Subscript(
                            value=Name(id='indexToSymbol', ctx=Load()),
                            slice=Name(id='index', ctx=Load()),
                            ctx=Store())],
                    value=Name(id='symbol', ctx=Load()))],
            decorator_list=[]),
        FunctionDef(
            name='getSymbol',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='index')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=Subscript(
                        value=Name(id='indexToSymbol', ctx=Load()),
                        slice=Name(id='index', ctx=Load()),
                        ctx=Load()))],
            decorator_list=[]),
        FunctionDef(
            name='start',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='sys', ctx=Load()),
                                attr='stdout',
                                ctx=Load()),
                            attr='write',
                            ctx=Load()),
                        args=[
                            JoinedStr(
                                values=[
                                    Constant(value='models.start\n')])],
                        keywords=[])),
                Global(
                    names=[
                        'indexToSymbol',
                        'indexToCallSite',
                        'symbolToIndex',
                        'callSiteToIndex']),
                Assign(
                    targets=[
                        Name(id='indexToSymbol', ctx=Store())],
                    value=Dict(keys=[], values=[])),
                Assign(
                    targets=[
                        Name(id='indexToCallSite', ctx=Store())],
                    value=Dict(keys=[], values=[])),
                Assign(
                    targets=[
                        Name(id='symbolToIndex', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='collections', ctx=Load()),
                            attr='defaultdict',
                            ctx=Load()),
                        args=[
                            Lambda(
                                args=arguments(
                                    posonlyargs=[],
                                    args=[],
                                    kwonlyargs=[],
                                    kw_defaults=[],
                                    defaults=[]),
                                body=Call(
                                    func=Name(id='len', ctx=Load()),
                                    args=[
                                        Name(id='indexToSymbol', ctx=Load())],
                                    keywords=[]))],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='callSiteToIndex', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='collections', ctx=Load()),
                            attr='defaultdict',
                            ctx=Load()),
                        args=[
                            Lambda(
                                args=arguments(
                                    posonlyargs=[],
                                    args=[],
                                    kwonlyargs=[],
                                    kw_defaults=[],
                                    defaults=[]),
                                body=Call(
                                    func=Name(id='len', ctx=Load()),
                                    args=[
                                        Name(id='indexToCallSite', ctx=Load())],
                                    keywords=[]))],
                        keywords=[]))],
            decorator_list=[]),
        FunctionDef(
            name='stop',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Pass()],
            decorator_list=[])],
    type_ignores=[])
Module(
    body=[
        ImportFrom(
            module='collections',
            names=[
                alias(name='defaultdict')],
            level=0),
        Import(
            names=[
                alias(name='inspect')]),
        Import(
            names=[
                alias(name='logging')]),
        Import(
            names=[
                alias(name='sys')]),
        Import(
            names=[
                alias(name='threading')]),
        Import(
            names=[
                alias(name='time')]),
        ImportFrom(
            module='microlog',
            names=[
                alias(name='config')],
            level=0),
        ImportFrom(
            module='microlog',
            names=[
                alias(name='log')],
            level=0),
        ImportFrom(
            module='microlog',
            names=[
                alias(name='models')],
            level=0),
        Assign(
            targets=[
                Name(id='KB', ctx=Store())],
            value=Constant(value=1024)),
        Assign(
            targets=[
                Name(id='MB', ctx=Store())],
            value=BinOp(
                left=Name(id='KB', ctx=Load()),
                op=Mult(),
                right=Name(id='KB', ctx=Load()))),
        Assign(
            targets=[
                Name(id='GB', ctx=Store())],
            value=BinOp(
                left=Name(id='MB', ctx=Load()),
                op=Mult(),
                right=Name(id='KB', ctx=Load()))),
        ClassDef(
            name='StatusGenerator',
            bases=[],
            keywords=[],
            body=[
                Assign(
                    targets=[
                        Name(id='memoryWarning', ctx=Store())],
                    value=Constant(value=0)),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Import(
                            names=[
                                alias(name='psutil')]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='daemon',
                                    ctx=Store())],
                            value=Constant(value=True)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lastCpuSample',
                                    ctx=Store())],
                            value=Tuple(
                                elts=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='log', ctx=Load()),
                                            attr='now',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='psutil', ctx=Load()),
                                                    attr='Process',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            attr='cpu_times',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='startProcess',
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='getProcess',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='delay',
                                    ctx=Store())],
                            value=Attribute(
                                value=Name(id='config', ctx=Load()),
                                attr='statusDelay',
                                ctx=Load())),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='tick',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='getSystem',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(
                                arg='self',
                                annotation=Name(id='float', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Import(
                            names=[
                                alias(name='psutil')]),
                        Assign(
                            targets=[
                                Name(id='memory', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='psutil', ctx=Load()),
                                    attr='virtual_memory',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='System',
                                    ctx=Load()),
                                args=[
                                    BinOp(
                                        left=Call(
                                            func=Attribute(
                                                value=Name(id='psutil', ctx=Load()),
                                                attr='cpu_percent',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        op=Div(),
                                        right=Call(
                                            func=Attribute(
                                                value=Name(id='psutil', ctx=Load()),
                                                attr='cpu_count',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[])),
                                    Attribute(
                                        value=Name(id='memory', ctx=Load()),
                                        attr='total',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='memory', ctx=Load()),
                                        attr='free',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Attribute(
                        value=Name(id='models', ctx=Load()),
                        attr='System',
                        ctx=Load())),
                FunctionDef(
                    name='getProcess',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='startProcess',
                                annotation=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='Process',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=None)]),
                    body=[
                        Import(
                            names=[
                                alias(name='psutil')]),
                        Assign(
                            targets=[
                                Name(id='process', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='psutil', ctx=Load()),
                                    attr='Process',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='now', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='now',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        With(
                            items=[
                                withitem(
                                    context_expr=Call(
                                        func=Attribute(
                                            value=Name(id='process', ctx=Load()),
                                            attr='oneshot',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='memory', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='process', ctx=Load()),
                                            attr='memory_info',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='cpuTimes', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='process', ctx=Load()),
                                            attr='cpu_times',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))]),
                        FunctionDef(
                            name='getCpu',
                            args=arguments(
                                posonlyargs=[],
                                args=[],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Name(id='lastCpuSampleTime', ctx=Store()),
                                                Name(id='lastCpuTimes', ctx=Store())],
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='lastCpuSample',
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Name(id='user', ctx=Store())],
                                    value=BinOp(
                                        left=Attribute(
                                            value=Name(id='cpuTimes', ctx=Load()),
                                            attr='user',
                                            ctx=Load()),
                                        op=Sub(),
                                        right=Attribute(
                                            value=Name(id='lastCpuTimes', ctx=Load()),
                                            attr='user',
                                            ctx=Load()))),
                                Assign(
                                    targets=[
                                        Name(id='system', ctx=Store())],
                                    value=BinOp(
                                        left=Attribute(
                                            value=Name(id='cpuTimes', ctx=Load()),
                                            attr='system',
                                            ctx=Load()),
                                        op=Sub(),
                                        right=Attribute(
                                            value=Name(id='lastCpuTimes', ctx=Load()),
                                            attr='system',
                                            ctx=Load()))),
                                Assign(
                                    targets=[
                                        Name(id='duration', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='now', ctx=Load()),
                                        op=Sub(),
                                        right=Name(id='lastCpuSampleTime', ctx=Load()))),
                                Assign(
                                    targets=[
                                        Name(id='cpu', ctx=Store())],
                                    value=Call(
                                        func=Name(id='min', ctx=Load()),
                                        args=[
                                            Constant(value=100),
                                            BinOp(
                                                left=BinOp(
                                                    left=BinOp(
                                                        left=Name(id='user', ctx=Load()),
                                                        op=Add(),
                                                        right=Name(id='system', ctx=Load())),
                                                    op=Mult(),
                                                    right=Constant(value=100)),
                                                op=Div(),
                                                right=Name(id='duration', ctx=Load()))],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='lastCpuSample',
                                            ctx=Store())],
                                    value=Tuple(
                                        elts=[
                                            Name(id='now', ctx=Load()),
                                            Name(id='cpuTimes', ctx=Load())],
                                        ctx=Load())),
                                Return(
                                    value=Name(id='cpu', ctx=Load()))],
                            decorator_list=[]),
                        FunctionDef(
                            name='getMemory',
                            args=arguments(
                                posonlyargs=[],
                                args=[],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='checkMemory',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='memory', ctx=Load()),
                                                attr='rss',
                                                ctx=Load())],
                                        keywords=[])),
                                Return(
                                    value=Attribute(
                                        value=Name(id='memory', ctx=Load()),
                                        attr='rss',
                                        ctx=Load()))],
                            decorator_list=[]),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='Process',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='getCpu', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='getMemory', ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Attribute(
                        value=Name(id='models', ctx=Load()),
                        attr='Process',
                        ctx=Load())),
                FunctionDef(
                    name='checkMemory',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='memory')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='gb', ctx=Store())],
                            value=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    BinOp(
                                        left=Name(id='memory', ctx=Load()),
                                        op=Div(),
                                        right=Name(id='GB', ctx=Load()))],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Name(id='gb', ctx=Load()),
                                ops=[
                                    Gt()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='StatusGenerator', ctx=Load()),
                                        attr='memoryWarning',
                                        ctx=Load())]),
                            body=[
                                ImportFrom(
                                    module='microlog.api',
                                    names=[
                                        alias(name='warn')],
                                    level=0),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='StatusGenerator', ctx=Load()),
                                            attr='memoryWarning',
                                            ctx=Store())],
                                    value=Name(id='gb', ctx=Load())),
                                Expr(
                                    value=Call(
                                        func=Name(id='warn', ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value="<b style='color: red'>WARNING</b><br> Python process memory grew to "),
                                                    FormattedValue(
                                                        value=BinOp(
                                                            left=Name(id='memory', ctx=Load()),
                                                            op=Div(),
                                                            right=Name(id='GB', ctx=Load())),
                                                        conversion=-1,
                                                        format_spec=JoinedStr(
                                                            values=[
                                                                Constant(value='.1f')])),
                                                    Constant(value=' GB')])],
                                        keywords=[]))],
                            orelse=[])],
                    decorator_list=[]),
                FunctionDef(
                    name='tick',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='models', ctx=Load()),
                                            attr='Status',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='log', ctx=Load()),
                                                    attr='now',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='getSystem',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='getProcess',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='startProcess',
                                                        ctx=Load())],
                                                keywords=[]),
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='getPython',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[])],
                                        keywords=[]),
                                    attr='marshall',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='getPython',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='Python',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='len', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='sys', ctx=Load()),
                                                attr='modules',
                                                ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Attribute(
                        value=Name(id='models', ctx=Load()),
                        attr='Python',
                        ctx=Load())),
                FunctionDef(
                    name='stop',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='tick',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='tick',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[])],
            decorator_list=[]),
        ClassDef(
            name='Tracer',
            bases=[
                Attribute(
                    value=Name(id='threading', ctx=Load()),
                    attr='Thread',
                    ctx=Load())],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='threading', ctx=Load()),
                                        attr='Thread',
                                        ctx=Load()),
                                    attr='__init__',
                                    ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='statusGenerator',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='StatusGenerator', ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[]),
                Expr(
                    value=Constant(value='\n    Tracer class that runs in a background thread and periodically generates stack traces.\n\n    Parameters:\n    - delay: The delay in seconds between generating stack traces.\n\n    Functionality:\n    - Starts a background daemon thread running tick() at a regular interval.\n    - For each thread, merges the current stack trace with a new one.\n    - At the end, generates a final stack trace with the current timestamp.\n    ')),
                FunctionDef(
                    name='start',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='setDaemon',
                                    ctx=Load()),
                                args=[
                                    Constant(value=True)],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stacks',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='defaultdict', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='models', ctx=Load()),
                                        attr='Stack',
                                        ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='delay',
                                    ctx=Store())],
                            value=Attribute(
                                value=Name(id='config', ctx=Load()),
                                attr='traceDelay',
                                ctx=Load())),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='track_print',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='track_logging',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lastStatus',
                                    ctx=Store())],
                            value=Constant(value=0)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='running',
                                    ctx=Store())],
                            value=Constant(value=True)),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='threading', ctx=Load()),
                                        attr='Thread',
                                        ctx=Load()),
                                    attr='start',
                                    ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='run',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        While(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='running',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='tick',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='time', ctx=Load()),
                                            attr='sleep',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='delay',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='track_print',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        ImportFrom(
                            module='microlog.api',
                            names=[
                                alias(name='info')],
                            level=0),
                        ImportFrom(
                            module='microlog.api',
                            names=[
                                alias(name='error')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='original_print', ctx=Store())],
                            value=Name(id='print', ctx=Load())),
                        FunctionDef(
                            name='microlog_print',
                            args=arguments(
                                posonlyargs=[],
                                args=[],
                                vararg=arg(
                                    arg='values',
                                    annotation=Name(id='object', ctx=Load())),
                                kwonlyargs=[
                                    arg(
                                        arg='sep',
                                        annotation=BinOp(
                                            left=Name(id='str', ctx=Load()),
                                            op=BitOr(),
                                            right=Constant(value=None))),
                                    arg(
                                        arg='end',
                                        annotation=BinOp(
                                            left=Name(id='str', ctx=Load()),
                                            op=BitOr(),
                                            right=Constant(value=None))),
                                    arg(arg='file'),
                                    arg(arg='flush')],
                                kw_defaults=[
                                    Constant(value=' '),
                                    Constant(value='\n'),
                                    Constant(value=None),
                                    Constant(value=False)],
                                defaults=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Name(id='original_print', ctx=Load()),
                                        args=[
                                            Starred(
                                                value=Name(id='values', ctx=Load()),
                                                ctx=Load())],
                                        keywords=[
                                            keyword(
                                                arg='sep',
                                                value=Name(id='sep', ctx=Load())),
                                            keyword(
                                                arg='end',
                                                value=Name(id='end', ctx=Load())),
                                            keyword(
                                                arg='file',
                                                value=Name(id='file', ctx=Load())),
                                            keyword(
                                                arg='flush',
                                                value=Name(id='flush', ctx=Load()))])),
                                Assign(
                                    targets=[
                                        Name(id='log', ctx=Store())],
                                    value=IfExp(
                                        test=Compare(
                                            left=Name(id='file', ctx=Load()),
                                            ops=[
                                                Eq()],
                                            comparators=[
                                                Attribute(
                                                    value=Name(id='sys', ctx=Load()),
                                                    attr='stderr',
                                                    ctx=Load())]),
                                        body=Name(id='error', ctx=Load()),
                                        orelse=IfExp(
                                            test=Compare(
                                                left=Name(id='file', ctx=Load()),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    List(
                                                        elts=[
                                                            Constant(value=None),
                                                            Attribute(
                                                                value=Name(id='sys', ctx=Load()),
                                                                attr='stdout',
                                                                ctx=Load())],
                                                        ctx=Load())]),
                                            body=Name(id='info', ctx=Load()),
                                            orelse=Constant(value=None)))),
                                If(
                                    test=Name(id='log', ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Name(id='log', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Constant(value=' '),
                                                            attr='join',
                                                            ctx=Load()),
                                                        args=[
                                                            Call(
                                                                func=Name(id='map', ctx=Load()),
                                                                args=[
                                                                    Name(id='str', ctx=Load()),
                                                                    Name(id='values', ctx=Load())],
                                                                keywords=[])],
                                                        keywords=[])],
                                                keywords=[]))],
                                    orelse=[]),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='sample',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            decorator_list=[],
                            returns=Constant(value=None)),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Name(id='__builtins__', ctx=Load()),
                                    slice=Constant(value='print'),
                                    ctx=Store())],
                            value=Name(id='microlog_print', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='track_logging',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='tracer', ctx=Store())],
                            value=Name(id='self', ctx=Load())),
                        ClassDef(
                            name='LogStreamHandler',
                            bases=[
                                Attribute(
                                    value=Name(id='logging', ctx=Load()),
                                    attr='StreamHandler',
                                    ctx=Load())],
                            keywords=[],
                            body=[
                                FunctionDef(
                                    name='__init__',
                                    args=arguments(
                                        posonlyargs=[],
                                        args=[
                                            arg(arg='self')],
                                        kwonlyargs=[],
                                        kw_defaults=[],
                                        defaults=[]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='logging', ctx=Load()),
                                                        attr='StreamHandler',
                                                        ctx=Load()),
                                                    attr='__init__',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='self', ctx=Load())],
                                                keywords=[])),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='setLevel',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='logging', ctx=Load()),
                                                        attr='DEBUG',
                                                        ctx=Load())],
                                                keywords=[])),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='setFormatter',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='logging', ctx=Load()),
                                                            attr='Formatter',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='%(asctime)s - %(name)s - %(levelname)s - %(message)s')],
                                                        keywords=[])],
                                                keywords=[]))],
                                    decorator_list=[]),
                                FunctionDef(
                                    name='emit',
                                    args=arguments(
                                        posonlyargs=[],
                                        args=[
                                            arg(arg='self'),
                                            arg(arg='record')],
                                        kwonlyargs=[],
                                        kw_defaults=[],
                                        defaults=[]),
                                    body=[
                                        ImportFrom(
                                            module='microlog.api',
                                            names=[
                                                alias(name='debug')],
                                            level=0),
                                        ImportFrom(
                                            module='microlog.api',
                                            names=[
                                                alias(name='info')],
                                            level=0),
                                        ImportFrom(
                                            module='microlog.api',
                                            names=[
                                                alias(name='warn')],
                                            level=0),
                                        ImportFrom(
                                            module='microlog.api',
                                            names=[
                                                alias(name='error')],
                                            level=0),
                                        Assign(
                                            targets=[
                                                Name(id='message', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='format',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='record', ctx=Load())],
                                                keywords=[])),
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Name(id='record', ctx=Load()),
                                                    attr='levelno',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='logging', ctx=Load()),
                                                        attr='INFO',
                                                        ctx=Load())]),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Name(id='info', ctx=Load()),
                                                        args=[
                                                            Name(id='message', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Compare(
                                                        left=Attribute(
                                                            value=Name(id='record', ctx=Load()),
                                                            attr='levelno',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='logging', ctx=Load()),
                                                                attr='DEBUG',
                                                                ctx=Load())]),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Name(id='debug', ctx=Load()),
                                                                args=[
                                                                    Name(id='message', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Compare(
                                                                left=Attribute(
                                                                    value=Name(id='record', ctx=Load()),
                                                                    attr='levelno',
                                                                    ctx=Load()),
                                                                ops=[
                                                                    Eq()],
                                                                comparators=[
                                                                    Attribute(
                                                                        value=Name(id='logging', ctx=Load()),
                                                                        attr='WARN',
                                                                        ctx=Load())]),
                                                            body=[
                                                                Expr(
                                                                    value=Call(
                                                                        func=Name(id='warn', ctx=Load()),
                                                                        args=[
                                                                            Name(id='message', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=Compare(
                                                                        left=Attribute(
                                                                            value=Name(id='record', ctx=Load()),
                                                                            attr='levelno',
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            Eq()],
                                                                        comparators=[
                                                                            Attribute(
                                                                                value=Name(id='logging', ctx=Load()),
                                                                                attr='ERROR',
                                                                                ctx=Load())]),
                                                                    body=[
                                                                        Expr(
                                                                            value=Call(
                                                                                func=Name(id='error', ctx=Load()),
                                                                                args=[
                                                                                    Name(id='message', ctx=Load())],
                                                                                keywords=[]))],
                                                                    orelse=[])])])]),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='tracer', ctx=Load()),
                                                    attr='sample',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]))],
                                    decorator_list=[])],
                            decorator_list=[]),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logging', ctx=Load()),
                                            attr='getLogger',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    attr='addHandler',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='LogStreamHandler', ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[]),
                FunctionDef(
                    name='tick',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Runs every `delay` seconds. Generates a call stack sample.\n        ')),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='sample',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='config')],
                            level=0),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='when', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='now',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=BinOp(
                                    left=Name(id='when', ctx=Load()),
                                    op=Sub(),
                                    right=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='lastStatus',
                                        ctx=Load())),
                                ops=[
                                    Gt()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='config', ctx=Load()),
                                        attr='statusDelay',
                                        ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='lastStatus',
                                            ctx=Store())],
                                    value=Name(id='when', ctx=Load())),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='statusGenerator',
                                                ctx=Load()),
                                            attr='tick',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='sample',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='function')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=None)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Samples all threads.\n\n        Parameters:\n        - function: The function to add to the current stack trace, when using a decorator.\n        ')),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='when', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='log', ctx=Load()),
                                    attr='now',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='frames', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='sys', ctx=Load()),
                                    attr='_current_frames',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='threadId', ctx=Store()),
                                    Name(id='frame', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Attribute(
                                    value=Name(id='frames', ctx=Load()),
                                    attr='items',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Name(id='threadId', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='ident',
                                                ctx=Load())]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='merge',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='threadId', ctx=Load()),
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='getStack',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='when', ctx=Load()),
                                                            Name(id='threadId', ctx=Load()),
                                                            Name(id='frame', ctx=Load()),
                                                            Name(id='function', ctx=Load())],
                                                        keywords=[])],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        For(
                            target=Name(id='threadId', ctx=Store()),
                            iter=Call(
                                func=Name(id='list', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='stacks',
                                                ctx=Load()),
                                            attr='keys',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Name(id='threadId', ctx=Load()),
                                        ops=[
                                            NotIn()],
                                        comparators=[
                                            Name(id='frames', ctx=Load())]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='merge',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='threadId', ctx=Load()),
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='models', ctx=Load()),
                                                            attr='Stack',
                                                            ctx=Load()),
                                                        args=[
                                                            Call(
                                                                func=Attribute(
                                                                    value=Name(id='log', ctx=Load()),
                                                                    attr='now',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            Name(id='threadId', ctx=Load())],
                                                        keywords=[])],
                                                keywords=[])),
                                        Delete(
                                            targets=[
                                                Subscript(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='stacks',
                                                        ctx=Load()),
                                                    slice=Name(id='threadId', ctx=Load()),
                                                    ctx=Del())])],
                                    orelse=[])],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='getStack',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='when'),
                            arg(arg='threadId'),
                            arg(arg='frame'),
                            arg(arg='function')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Generates a new stack trace with the given timestamp and starting frame.  \n\n        Parameters:\n        - when: The timestamp for the new stack trace. \n        - frame: The starting frame for the new stack trace.\n        - function: The function to add to the current stack trace\n        ')),
                        Assign(
                            targets=[
                                Name(id='currentStack', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='Stack',
                                    ctx=Load()),
                                args=[
                                    Name(id='when', ctx=Load()),
                                    Name(id='threadId', ctx=Load()),
                                    Name(id='frame', ctx=Load())],
                                keywords=[])),
                        If(
                            test=Name(id='function', ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='filename', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='inspect', ctx=Load()),
                                            attr='getfile',
                                            ctx=Load()),
                                        args=[
                                            Name(id='function', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='lineno', ctx=Store())],
                                    value=Subscript(
                                        value=Call(
                                            func=Attribute(
                                                value=Name(id='inspect', ctx=Load()),
                                                attr='getsourcelines',
                                                ctx=Load()),
                                            args=[
                                                Name(id='function', ctx=Load())],
                                            keywords=[]),
                                        slice=Constant(value=1),
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Name(id='module', ctx=Store())],
                                    value=Attribute(
                                        value=Call(
                                            func=Attribute(
                                                value=Name(id='inspect', ctx=Load()),
                                                attr='getmodule',
                                                ctx=Load()),
                                            args=[
                                                Name(id='function', ctx=Load())],
                                            keywords=[]),
                                        attr='__name__',
                                        ctx=Load())),
                                If(
                                    test=Compare(
                                        left=Name(id='module', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='__main__')]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='module', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Subscript(
                                                                value=Attribute(
                                                                    value=Name(id='sys', ctx=Load()),
                                                                    attr='argv',
                                                                    ctx=Load()),
                                                                slice=Constant(value=0),
                                                                ctx=Load()),
                                                            attr='replace',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='.py'),
                                                            Constant(value='')],
                                                        keywords=[]),
                                                    attr='replace',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='/'),
                                                    Constant(value='.')],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='clazz', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='getClassForMethod',
                                            ctx=Load()),
                                        args=[
                                            Name(id='function', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='name', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='function', ctx=Load()),
                                        attr='__name__',
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Name(id='callSite', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='models', ctx=Load()),
                                            attr='CallSite',
                                            ctx=Load()),
                                        args=[
                                            Name(id='filename', ctx=Load()),
                                            Name(id='lineno', ctx=Load()),
                                            JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='module', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='.'),
                                                    FormattedValue(
                                                        value=Name(id='clazz', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='.'),
                                                    FormattedValue(
                                                        value=Name(id='name', ctx=Load()),
                                                        conversion=-1)])],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='top', ctx=Store())],
                                    value=Subscript(
                                        value=Attribute(
                                            value=Name(id='currentStack', ctx=Load()),
                                            attr='calls',
                                            ctx=Load()),
                                        slice=UnaryOp(
                                            op=USub(),
                                            operand=Constant(value=1)),
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Name(id='call', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='models', ctx=Load()),
                                            attr='Call',
                                            ctx=Load()),
                                        args=[
                                            Name(id='when', ctx=Load()),
                                            Name(id='threadId', ctx=Load()),
                                            Name(id='callSite', ctx=Load()),
                                            Attribute(
                                                value=Name(id='top', ctx=Load()),
                                                attr='callSite',
                                                ctx=Load()),
                                            BinOp(
                                                left=Attribute(
                                                    value=Name(id='top', ctx=Load()),
                                                    attr='depth',
                                                    ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=1)),
                                            Constant(value=0)],
                                        keywords=[])),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='currentStack', ctx=Load()),
                                                attr='calls',
                                                ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Name(id='call', ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Name(id='currentStack', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='getClassForMethod',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='method')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='inspect', ctx=Load()),
                                    attr='ismethod',
                                    ctx=Load()),
                                args=[
                                    Name(id='method', ctx=Load())],
                                keywords=[]),
                            body=[
                                For(
                                    target=Name(id='cls', ctx=Store()),
                                    iter=Call(
                                        func=Attribute(
                                            value=Name(id='inspect', ctx=Load()),
                                            attr='getmro',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Attribute(
                                                    value=Name(id='method', ctx=Load()),
                                                    attr='__self__',
                                                    ctx=Load()),
                                                attr='__class__',
                                                ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        If(
                                            test=Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Attribute(
                                                            value=Name(id='cls', ctx=Load()),
                                                            attr='__dict__',
                                                            ctx=Load()),
                                                        attr='get',
                                                        ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Name(id='method', ctx=Load()),
                                                            attr='__name__',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                ops=[
                                                    Is()],
                                                comparators=[
                                                    Name(id='method', ctx=Load())]),
                                            body=[
                                                Return(
                                                    value=Attribute(
                                                        value=Name(id='cls', ctx=Load()),
                                                        attr='__name__',
                                                        ctx=Load()))],
                                            orelse=[])],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='method', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='method', ctx=Load()),
                                        attr='__func__',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='inspect', ctx=Load()),
                                    attr='isfunction',
                                    ctx=Load()),
                                args=[
                                    Name(id='method', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='cls', ctx=Store())],
                                    value=Call(
                                        func=Name(id='getattr', ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='inspect', ctx=Load()),
                                                    attr='getmodule',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='method', ctx=Load())],
                                                keywords=[]),
                                            Subscript(
                                                value=Call(
                                                    func=Attribute(
                                                        value=Subscript(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='method', ctx=Load()),
                                                                        attr='__qualname__',
                                                                        ctx=Load()),
                                                                    attr='split',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Constant(value='.<locals>'),
                                                                    Constant(value=1)],
                                                                keywords=[]),
                                                            slice=Constant(value=0),
                                                            ctx=Load()),
                                                        attr='rsplit',
                                                        ctx=Load()),
                                                    args=[
                                                        Constant(value='.'),
                                                        Constant(value=1)],
                                                    keywords=[]),
                                                slice=Constant(value=0),
                                                ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='cls', ctx=Load()),
                                            Name(id='type', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Attribute(
                                                value=Name(id='cls', ctx=Load()),
                                                attr='__name__',
                                                ctx=Load()))],
                                    orelse=[])],
                            orelse=[]),
                        Return(
                            value=Constant(value=''))],
                    decorator_list=[]),
                FunctionDef(
                    name='merge',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='threadId',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='stack',
                                annotation=Attribute(
                                    value=Name(id='models', ctx=Load()),
                                    attr='Stack',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Synchronizes two stack traces by updating timestamps and caller information.  \n\n        Parameters:\n        - self: The Tracer object. \n        - threadId: The thread identifier for the stack.\n        - stack: The new stack trace to merge with the current one.\n\n        Functionality:\n        - Iterates over the current stack trace and the new one call by call.\n        - If two calls are the same, updates the timestamp of the new call to match the old one.\n        - Otherwise, "marshalls" the old call by passing it the timestamp and caller of the new call.\n        - Handles any remaining old calls by marshalling them with the last new call\'s timestamp and caller.\n        - Finally, updates self.stacks to the new stack.\n        ')),
                        Assign(
                            targets=[
                                Name(id='caller', ctx=Store())],
                            value=Constant(value=None)),
                        Assign(
                            targets=[
                                Name(id='previousStack', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stacks',
                                    ctx=Load()),
                                slice=Name(id='threadId', ctx=Load()),
                                ctx=Load())),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='call1', ctx=Store()),
                                    Name(id='call2', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Name(id='zip', ctx=Load()),
                                args=[
                                    Name(id='previousStack', ctx=Load()),
                                    Name(id='stack', ctx=Load())],
                                keywords=[]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Name(id='call1', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Name(id='call2', ctx=Load())]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='call2', ctx=Load()),
                                                    attr='when',
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='call1', ctx=Load()),
                                                attr='when',
                                                ctx=Load()))],
                                    orelse=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='call1', ctx=Load()),
                                                    attr='marshall',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='stack', ctx=Load()),
                                                        attr='when',
                                                        ctx=Load()),
                                                    Name(id='threadId', ctx=Load()),
                                                    Name(id='caller', ctx=Load())],
                                                keywords=[]))]),
                                Assign(
                                    targets=[
                                        Name(id='caller', ctx=Store())],
                                    value=Name(id='call1', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='previousStack', ctx=Load()),
                                    Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Name(id='previousStack', ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Call(
                                                func=Name(id='len', ctx=Load()),
                                                args=[
                                                    Name(id='stack', ctx=Load())],
                                                keywords=[])])]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='caller', ctx=Store())],
                                    value=Subscript(
                                        value=Name(id='previousStack', ctx=Load()),
                                        slice=BinOp(
                                            left=Call(
                                                func=Name(id='len', ctx=Load()),
                                                args=[
                                                    Name(id='stack', ctx=Load())],
                                                keywords=[]),
                                            op=Sub(),
                                            right=Constant(value=1)),
                                        ctx=Load())),
                                For(
                                    target=Name(id='call', ctx=Store()),
                                    iter=Subscript(
                                        value=Name(id='previousStack', ctx=Load()),
                                        slice=Slice(
                                            lower=Call(
                                                func=Name(id='len', ctx=Load()),
                                                args=[
                                                    Name(id='stack', ctx=Load())],
                                                keywords=[])),
                                        ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='call', ctx=Load()),
                                                    attr='marshall',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='stack', ctx=Load()),
                                                        attr='when',
                                                        ctx=Load()),
                                                    Name(id='threadId', ctx=Load()),
                                                    Name(id='caller', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='caller', ctx=Store())],
                                            value=Name(id='call', ctx=Load()))],
                                    orelse=[])],
                            orelse=[]),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='stacks',
                                        ctx=Load()),
                                    slice=Name(id='threadId', ctx=Load()),
                                    ctx=Store())],
                            value=Name(id='stack', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='stop',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Generates a final stack trace for all threads with the current timestamp.  \n        ')),
                        ImportFrom(
                            module='microlog',
                            names=[
                                alias(name='log')],
                            level=0),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='statusGenerator',
                                        ctx=Load()),
                                    attr='tick',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='running',
                                    ctx=Store())],
                            value=Constant(value=False)),
                        For(
                            target=Name(id='threadId', ctx=Store()),
                            iter=Call(
                                func=Attribute(
                                    value=Name(id='sys', ctx=Load()),
                                    attr='_current_frames',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Name(id='threadId', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='ident',
                                                ctx=Load())]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='merge',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='threadId', ctx=Load()),
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='models', ctx=Load()),
                                                            attr='Stack',
                                                            ctx=Load()),
                                                        args=[
                                                            Call(
                                                                func=Attribute(
                                                                    value=Name(id='log', ctx=Load()),
                                                                    attr='now',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            Name(id='threadId', ctx=Load())],
                                                        keywords=[])],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    decorator_list=[])],
            decorator_list=[])],
    type_ignores=[])
------------------------------------------------------------------------------------------
Microlog Statistics:
------------------------------------------------------------------------------------------
- log size:    1,664 bytes
- report URL:  http://127.0.0.1:4000/log/tests-test_print/0.1.0/2023_06_19_21_24_52
- duration:    0.060s
------------------------------------------------------------------------------------------
